(function() {var implementors = {};
implementors["extendr_api"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SliceIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for StrIter","synthetic":true,"types":[]},{"text":"impl Unpin for Bool","synthetic":true,"types":[]},{"text":"impl Unpin for Arg","synthetic":true,"types":[]},{"text":"impl Unpin for Func","synthetic":true,"types":[]},{"text":"impl Unpin for Impl","synthetic":true,"types":[]},{"text":"impl Unpin for Metadata","synthetic":true,"types":[]},{"text":"impl Unpin for Robj","synthetic":true,"types":[]},{"text":"impl Unpin for Character","synthetic":true,"types":[]},{"text":"impl Unpin for Environment","synthetic":true,"types":[]},{"text":"impl Unpin for EnvIter","synthetic":true,"types":[]},{"text":"impl Unpin for Expression","synthetic":true,"types":[]},{"text":"impl Unpin for Function","synthetic":true,"types":[]},{"text":"impl Unpin for Language","synthetic":true,"types":[]},{"text":"impl Unpin for List","synthetic":true,"types":[]},{"text":"impl Unpin for ListIter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for FromList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Unpin for RArray&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Nullable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Pairlist","synthetic":true,"types":[]},{"text":"impl Unpin for PairlistIter","synthetic":true,"types":[]},{"text":"impl Unpin for Primitive","synthetic":true,"types":[]},{"text":"impl Unpin for Promise","synthetic":true,"types":[]},{"text":"impl Unpin for Raw","synthetic":true,"types":[]},{"text":"impl Unpin for Symbol","synthetic":true,"types":[]},{"text":"impl Unpin for RType","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()