(function() {var implementors = {};
implementors["extendr_api"] = [{"text":"impl From&lt;Box&lt;dyn Error + 'static, Global&gt;&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Bool","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Bool","synthetic":false,"types":[]},{"text":"impl From&lt;Bool&gt; for bool","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ Bool&gt; for bool","synthetic":false,"types":[]},{"text":"impl From&lt;Arg&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Func&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Impl&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Metadata&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;()&gt; for Robj","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Result&lt;T, Error&gt;&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Robj&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ Robj&gt; for Robj","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 1]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 2]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 3]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 4]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 5]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 6]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 7]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 8]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 9]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 10]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 11]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 12]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 13]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 14]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 15]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 16]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 17]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 18]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;[T; 19]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;Vec&lt;T, Global&gt;&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;&amp;'a [T]&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Self: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Range&lt;T&gt;&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Range&lt;T&gt;: RobjItertools,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Range&lt;T&gt; as Iterator&gt;::Item: ToVectorValue,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;RangeInclusive&lt;T&gt;&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RangeInclusive&lt;T&gt;: RobjItertools,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;RangeInclusive&lt;T&gt; as Iterator&gt;::Item: ToVectorValue,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToVectorValue,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;SliceIter&lt;f64&gt;&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;SliceIter&lt;i32&gt;&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;SliceIter&lt;Bool&gt;&gt; for Robj","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;HashMap&lt;&amp;'a str, Robj, RandomState&gt;&gt; for Robj","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Vec&lt;Robj, Global&gt;&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;ListIter&gt; for Robj","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; From&lt;RArray&lt;T, D&gt;&gt; for Robj","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Nullable&lt;T&gt;&gt; for Robj <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Robj&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;PairlistIter&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ str&gt; for Symbol","synthetic":false,"types":[]},{"text":"impl From&lt;Pairlist&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Function&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Raw&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Character&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Environment&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;List&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Expression&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Language&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Symbol&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Primitive&gt; for Robj","synthetic":false,"types":[]},{"text":"impl From&lt;Promise&gt; for Robj","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()