var searchIndex = JSON.parse('{\
"extendr_api":{"doc":"A safe and user friendly R extension interface.","t":[0,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,3,11,11,6,6,6,6,3,11,11,0,0,3,12,11,11,11,11,0,3,12,12,3,12,12,12,12,12,12,3,12,12,12,3,12,12,12,11,0,17,17,0,8,11,8,10,8,11,0,6,6,3,6,6,6,6,6,6,3,12,3,5,8,18,16,16,16,16,10,10,11,11,11,11,10,11,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,5,5,5,5,5,5,5,14,14,14,8,16,16,10,10,10,10,8,8,6,6,3,6,6,6,6,6,6,6,6,3,3,3,4,13,13,0,5,5,8,16,10,3,3,3,12,3,12,12,12,8,18,16,16,16,16,10,10,11,11,11,11,10,11,10,8,16,10,8,10,3,8,4,13,13,13,13,13,13,3,5,5,3,12,12,12,3,4,13,12,12,12,13,8,8,8,5,14,8,16,10,10,10,8,16,16,10,10,10,10,8,10,8,8,8,8,8,8,16,10,8,8,8,16,14,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,14,14,4,13,13,8,16,16,16,10,8,16,16,10,3,3,3,8,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,8,16,10,10,5,5,5,5,3,23,14,14,14,14,8,16,10,8,16,10,8,16,10,0,0,11,11,8,11,8,10,8,11,11,11,11,11,11,8,11,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,5,0,0,3,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,3,0,3,11,11,0,3,11,11,11,11,11,0,3,11,11,11,11,0,3,11,11,11,11,11,3,11,3,12,0,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,13,0,3,11,11,11,11,3,11,0,3,11,0,3,11,11,11,11,11,11,0,3,11,11,0,3,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,8,10,0,8,16,10,8,16,10,8,16,10,23,14,14,14,14,17,17,17,17,17,17,17,8,10,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","Error","Panic","NotFound","EvalError","ParseError","NamesLengthMismatch","ExpectedNull","ExpectedSymbol","ExpectedPairlist","ExpectedFunction","ExpectedEnviroment","ExpectedPromise","ExpectedLanguage","ExpectedSpecial","ExpectedBuiltin","ExpectedCharacter","ExpectedLogical","ExpectedInteger","ExpectedReal","ExpectedComplex","ExpectedString","ExpectedDot","ExpectedAny","ExpectedList","ExpectedExpression","ExpectedBytecode","ExpectedExternalPtr","ExpectedWeakRef","ExpectedRaw","ExpectedS4","ExpectedPrimitive","ExpectedScalar","ExpectedVector","ExpectedMatrix","ExpectedMatrix3D","ExpectedNumeric","OutOfRange","MustNotBeNA","ExpectedNonZeroLength","TypeMismatch","NamespaceNotFound","Other","Result","functions","global_var","local_var","global_function","find_namespace","current_env","global_env","empty_env","base_env","base_namespace","namespace_registry","srcref","nil_value","na_string","blank_string","blank_scalar_string","na_str","parse","eval_string","eval_string_with_params","find_namespaced_function","iter","SliceIter","new","from_slice","NamedListIter","Int","Real","Logical","StrIter","new","na_iter","lang_macros","logical","Bool","0","to_bool","from_bool","is_true","is_false","metadata","Arg","name","arg_type","Func","doc","name","args","return_type","func_ptr","hidden","Impl","doc","name","methods","Metadata","name","functions","impls","make_r_wrappers","ownership","INITIAL_PRESERVATION_SIZE","EXTRA_PRESERVATION_SIZE","prelude","FromRobj","from_robj","IntoRobj","into_robj","RobjItertools","collect_robj","prelude","ArcArray","Array","ArrayBase","ArrayView","ArrayViewMut","CowArray","RawArrayView","RawArrayViewMut","RcArray","Axis","0","Dim","Dim","Dimension","NDIM","SliceArg","Pattern","Smaller","Larger","ndim","into_pattern","size","size_checked","as_array_view","as_array_view_mut","zeros","into_dyn","__private__","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayD","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","Ix0","Ix0","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","arr0","arr1","arr2","aview0","aview1","aview2","aview_mut1","array","azip","s","ShapeBuilder","Dim","Strides","into_shape","f","set_f","strides","AsArray","NdFloat","Ix","Ixs","ArrayBase","RcArray","ArcArray","Array","CowArray","ArrayView","ArrayViewMut","RawArrayView","RawArrayViewMut","OwnedArcRepr","RawViewRepr","ViewRepr","CowRepr","View","Owned","linalg","general_mat_mul","general_mat_vec_mul","Dot","Output","dot","Shape","StrideShape","Axis","0","AxisDescription","0","1","2","Dimension","NDIM","SliceArg","Pattern","Smaller","Larger","ndim","into_pattern","size","size_checked","as_array_view","as_array_view_mut","zeros","into_dyn","__private__","IntoDimension","Dim","into_dimension","RemoveAxis","remove_axis","IxDynImpl","NdIndex","ErrorKind","IncompatibleShape","IncompatibleLayout","RangeLimited","OutOfBounds","Unsupported","Overflow","ShapeError","indices","indices_of","Slice","start","end","step","SliceInfo","SliceOrIndex","Slice","start","end","step","Index","AsArray","LinalgScalar","NdFloat","stack","stack","IndexLonger","Output","index","get","uget","ShapeBuilder","Dim","Strides","into_shape","f","set_f","strides","AssignElem","assign_elem","Data","DataClone","DataMut","DataOwned","DataShared","RawData","Elem","__private__","RawDataClone","RawDataMut","RawDataSubst","Output","array","iter","Axes","Indices","IndicesIter","AxisChunksIter","AxisChunksIterMut","AxisIter","AxisIterMut","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","Iter","IterMut","Lanes","LanesIter","LanesIterMut","LanesMut","Windows","s","azip","FoldWhile","Continue","Done","IntoNdProducer","Item","Dim","Output","into_producer","NdProducer","Item","Dim","__private__","Zip","OwnedRepr","OwnedRcRepr","ScalarOperand","Dim","Ix0","Ix1","Ix2","Ix3","Ix4","Ix5","Ix6","IxDyn","Ix0","Ix1","Ix2","Ix3","Ix4","Ix5","Ix6","IxDyn","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayD","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","RcArray1","RcArray2","ArcArray1","ArcArray2","arr0","arr1","rcarr1","aview0","aview1","aview2","aview_mut1","aview_mut2","FixedInitializer","Elem","as_init_slice","len","arr2","rcarr2","arr3","rcarr3","Dim","extendr","extendr_module","pairlist","Rraw","R","TryFrom","Error","try_from","TryInto","Error","try_into","Index","Output","index","rmacros","robj","from_robj","collect_robj","FromRobj","from_robj","IntoRobj","into_robj","ToVectorValue","sexptype","to_real","to_integer","to_logical","to_raw","to_sexp","RobjItertools","collect_robj","Robj","rtype","len","is_empty","is_na","as_integer_slice","as_integer_iter","as_integer_vector","as_logical_slice","as_logical_vector","as_logical_iter","as_real_slice","as_real_iter","as_real_vector","as_raw_slice","as_integer_slice_mut","as_real_slice_mut","as_raw_slice_mut","as_string_vector","as_str_vector","as_str","as_integer","as_real","as_bool","as_logical","eval","eval_with_env","eval_blind","AsTypedSlice","as_typed_slice","as_typed_slice_mut","get_attrib","set_attrib","names","set_names","dim","dimnames","class","set_class","inherits","levels","thread_safety","this_thread_id","single_threaded","throw_r_error","catch_r_error","wrapper","character","Character","from_string","as_str","environment","Environment","new_with_parent","new_with_capacity","from_pairs","parent","set_parent","envflags","set_envflags","iter","names","set_local","local","EnvIter","expr","Expression","from_values","values","function","Function","from_parts","call","formals","body","environment","lang","Language","from_values","iter","names","values","list","List","new","from_values","from_pairs","values","iter","ListIter","new","FromList","0","matrix","RArray","RColumn","RMatrix","RMatrix3D","from_parts","data","dim","new_column","nrows","new_column","nrows","new_matrix","nrows","ncols","new_matrix","nrows","ncols","new_matrix3d","nrows","ncols","nsub","new_matrix3d","nrows","ncols","nsub","as_column","as_matrix","as_matrix3d","nullable","Nullable","NotNull","Null","pairlist","Pairlist","from_pairs","iter","names","values","PairlistIter","new","primitive","Primitive","from_string","promise","Promise","from_parts","code","environment","value","seen","eval","raw","Raw","from_bytes","as_slice","symbol","Symbol","from_string","as_str","unbound_value","missing_arg","base_symbol","brace_symbol","bracket_2_symbol","bracket_symbol","class_symbol","device_symbol","dimnames_symbol","dim_symbol","dollar_symbol","dots_symbol","double_colon_symbol","lastvalue_symbol","levels_symbol","mode_symbol","na_rm_symbol","name_symbol","names_symbol","namespace_env_symbol","package_symbol","previous_symbol","quote_symbol","row_names_symbol","seeds_symbol","sort_list_symbol","source_symbol","spec_symbol","tsp_symbol","triple_colon_symbol","dot_defined","dot_method","dot_package_name","dot_target","as_symbol","as_character","as_raw","as_language","as_pairlist","as_list","as_expression","as_environment","as_function","as_promise","SymPair","sym_pair","robj_ndarray","TryFrom","Error","try_from","TryInto","Error","try_into","Deref","Target","deref","extendr","extendr_module","pairlist","R","Rraw","TRUE","FALSE","NULL","NA_INTEGER","NA_REAL","NA_STRING","NA_LOGICAL","IsNA","is_na","RType","Null","Symbol","Pairlist","Function","Enviroment","Promise","Language","Special","Builtin","Character","Logical","Integer","Real","Complex","String","Dot","Any","List","Expression","Bytecode","ExternalPtr","WeakRef","Raw","S4","Unknown","call","lang","r","var","global","sym","list","data_frame","factor","rprint","rprintln","reprint","reprintln","test","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","index_checked","index_unchecked","into_shape","f","set_f","strides","into_dimension","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_shape","f","set_f","strides","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_producer","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from_iter","bitor_assign","bitor_assign","next_back","next_back","next_back","next_back","next_back","nth_back","rfold","next_back","next_back","nth_back","rfold","hash","hash","hash","hash","hash","hash","fmt","cmp","fmt","fmt","fmt","mul","mul","mul","mul","mul","drop","fmt","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","shl","shl","shl","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","rem_assign","rem_assign","div_assign","div_assign","sub","sub","sub","sub","sub","index","get","uget","as_ref","as_ref","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","ndim","slice","slice_mut","into_pattern","zeros","next_for","equal","size","size_checked","default_strides","_fastest_varying_stride_order","min_stride_axis","max_stride_axis","first_index","stride_offset","stride_offset_checked","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","slice","slice_mut","_fastest_varying_stride_order","into_pattern","zeros","next_for","insert_axis","try_remove_axis","ndim","slice","slice_mut","into_pattern","zeros","insert_axis","try_remove_axis","from_dimension","ndim","into_pattern","slice","slice_mut","zeros","next_for","equal","size","size_checked","last_elem","set_last_elem","default_strides","fortran_strides","_fastest_varying_stride_order","min_stride_axis","first_index","stride_offset","stride_offset_checked","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","size","zeros","next_for","stride_offset","stride_offset_checked","_fastest_varying_stride_order","insert_axis","try_remove_axis","shl_assign","shl_assign","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","into_owned","into_owned","into_owned","into_owned","into_owned","bitxor_assign","bitxor_assign","next","size_hint","next","size_hint","next","size_hint","next","size_hint","fold","nth","collect","all","any","find","find_map","count","last","position","next","size_hint","next","size_hint","next","size_hint","fold","nth","collect","all","any","find","find_map","count","last","position","next","fold","size_hint","next","size_hint","next","size_hint","fold","next","size_hint","next","size_hint","next","size_hint","next","size_hint","fmt","len","len","len","len","len","len","len","len","bitor","bitor","bitor","fmt","into_shape","f","set_f","strides","bitxor","bitxor","bitxor","new","into_shared","new","into_shared","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","rem","rem","rem","dot","dot","dot","dot","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","add","add","add","add","add","not","deref_mut","bitand_assign","bitand_assign","shr","shr","shr","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","add_assign","add_assign","add_assign","add_assign","add_assign","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","clone_with_ptr","clone_with_ptr","clone_from_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","index","index","index","index","index","index","index","index","index","index","shr_assign","shr_assign","default","default","default","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone","clone_from","bitand","bitand","bitand","div","div","div","partial_cmp","into_dimension","deref","deref","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","sexptype","to_logical","as_typed_slice","as_typed_slice_mut","as_typed_slice","as_typed_slice_mut","as_typed_slice","as_typed_slice_mut","as_typed_slice","as_typed_slice_mut","is_na","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","len","len","len","into_iter","into_iter","size_hint","next","nth","size_hint","next","nth","next","size_hint","next","nth","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","sub","add","mul","index","index_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","source","as_str_iter","from_vec","linspace","range","logspace","geomspace","eye","from_diag","from_elem","zeros","ones","default","from_shape_simple_fn","from_shape_fn","from_shape_vec","from_shape_vec_unchecked","uninitialized","maybe_uninit","len","len_of","is_empty","ndim","dim","raw_dim","shape","strides","stride_of","view","view_mut","to_owned","to_shared","into_owned","into_shared","first","first_mut","iter","iter_mut","indexed_iter","indexed_iter_mut","slice","slice_mut","multi_slice_mut","slice_move","slice_collapse","slice_inplace","slice_axis","slice_axis_mut","slice_axis_inplace","get","get_mut","uget","uget_mut","swap","uswap","index_axis","index_axis_mut","index_axis_move","collapse_axis","subview","subview_mut","subview_inplace","into_subview","select","genrows","genrows_mut","gencolumns","gencolumns_mut","lanes","lanes_mut","outer_iter","outer_iter_mut","axis_iter","axis_iter_mut","axis_chunks_iter","axis_chunks_iter_mut","exact_chunks","exact_chunks_mut","windows","diag","diag_mut","into_diag","is_standard_layout","as_standard_layout","as_ptr","as_mut_ptr","raw_view","raw_view_mut","as_slice","as_slice_mut","as_slice_memory_order","as_slice_memory_order_mut","into_shape","reshape","into_dyn","into_dimensionality","broadcast","swap_axes","permuted_axes","reversed_axes","t","axes","max_stride_axis","invert_axis","merge_axes","insert_axis","remove_axis","assign","fill","zip_mut_with","fold","map","map_mut","mapv","mapv_into","map_inplace","mapv_inplace","visit","fold_axis","map_axis","map_axis_mut","accumulate_axis_inplace","into_scalar","into_raw_vec","assume_init","to_vec","row","row_mut","nrows","rows","column","column_mut","ncols","cols","is_square","insert_axis_inplace","index_axis_inplace","sum","mean","scalar_sum","product","sum_axis","mean_axis","var_axis","std_axis","all_close","dot","dot","scaled_add","from_shape","from_shape_ptr","from_shape","from_shape_ptr","reborrow","reborrow","into_slice","to_slice","into_scalar","into_scalar","into_slice","split_at","split_at","multi_slice_move","from_shape_ptr","deref_into_view","split_at","cast","from_shape_ptr","deref_into_view","deref_into_view_mut","split_at","cast","is_view","is_owned","index","zeros","is_view","is_owned","size","axis","len","stride","kind","from_kind","new","step_by","new","out_ndim","is_slice","is_index","step_by","split_at","split_at","split_at","split_at","into_inner","is_done","from","indexed","size","apply","fold","fold_while","all","and","and_broadcast","apply_collect","apply_assign_into","split","apply","fold","fold_while","all","and","and_broadcast","apply_collect","apply_assign_into","split","apply","fold","fold_while","all","and","and_broadcast","apply_collect","apply_assign_into","split","apply","fold","fold_while","all","and","and_broadcast","apply_collect","apply_assign_into","split","apply","fold","fold_while","all","and","and_broadcast","apply_collect","apply_assign_into","split","apply","fold","fold_while","all","split","sexptype","to_real","to_integer","to_logical","to_raw","to_sexp","dollar","slice","index","tilde","double_colon","call","is_null","is_symbol","is_logical","is_real","is_complex","is_expression","is_environment","is_promise","is_string","is_object","get_current_srcref","get_src_filename","as_char","coerce_vector","pair_to_vector_list","vector_to_pair_list","as_character_factor","alloc_matrix","duplicate","find_function","find_var","eval_promise","ncols","nrows","xlengthgets","alloc_vector","conformable","is_array","is_factor","is_frame","is_function","is_integer","is_language","is_pairlist","is_matrix","is_list","is_number","is_primitive","is_ts","is_user_binop","is_valid_string","is_valid_string_f","is_vector","is_vector_atomic","is_vector_list","is_vectorizable","is_raw","is_character","is_missing_arg","is_unbound_value","is_package_env","package_env_name","is_namespace_env","namespace_env_spec"],"q":["extendr_api","extendr_api::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api","extendr_api::functions","","","","","","","","","","","","","","","","","","","","extendr_api","extendr_api::iter","","","","","","","","","","extendr_api","","extendr_api::logical","","","","","","extendr_api","extendr_api::metadata","","","","","","","","","","","","","","","","","","","extendr_api","extendr_api::ownership","","extendr_api","extendr_api::prelude","","","","","","","extendr_api::prelude::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","extendr_api::prelude::linalg","","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude::SliceOrIndex","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude::iter","","","","","","","","","","","","","","","","","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api","","extendr_api::prelude","","extendr_api::robj","extendr_api::prelude","extendr_api::robj","","","","","","","","","","extendr_api::prelude","extendr_api::robj","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api","extendr_api::thread_safety","","","","extendr_api","extendr_api::wrapper","extendr_api::wrapper::character","","","extendr_api::wrapper","extendr_api::wrapper::environment","","","","","","","","","","","","","extendr_api::wrapper","extendr_api::wrapper::expr","","","extendr_api::wrapper","extendr_api::wrapper::function","","","","","","extendr_api::wrapper","extendr_api::wrapper::lang","","","","","extendr_api::wrapper","extendr_api::wrapper::list","","","","","","","","","","extendr_api::wrapper","extendr_api::wrapper::matrix","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::robj","","","extendr_api::wrapper","extendr_api::wrapper::nullable","","","extendr_api::wrapper","extendr_api::wrapper::pairlist","","","","","","","extendr_api::wrapper","extendr_api::wrapper::primitive","","extendr_api::wrapper","extendr_api::wrapper::promise","","","","","","","extendr_api::wrapper","extendr_api::wrapper::raw","","","extendr_api::wrapper","extendr_api::wrapper::symbol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::robj","","","","","","","","","","extendr_api::wrapper","","extendr_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::error","","","","","","","","extendr_api::iter","","","","","","","","","","","","","","","","","","extendr_api::logical","","","","","","","","","extendr_api::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude::iterextendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::robj","","","","","","","","","extendr_api::wrapper::character","","","","","","","","","extendr_api::wrapper::environment","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::expr","","","","","","","","","extendr_api::wrapper::function","","","","","","","","","extendr_api::wrapper::lang","","","","","","","","","extendr_api::wrapper::list","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::matrix","","","","","","","extendr_api::wrapper::nullable","","","","","","","","","extendr_api::wrapper::pairlist","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::primitive","","","","","","","","","extendr_api::wrapper::promise","","","","","","","","","extendr_api::wrapper::raw","","","","","","","","","extendr_api::wrapper::symbol","","","","","","","","","extendr_api","","","","","","","extendr_api::prelude","","","extendr_api::prelude::iter","","","","","","","","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude::iter","extendr_api::prelude","extendr_api::prelude::iter","","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude::iter","extendr_api::prelude","","extendr_api::prelude::iter","","extendr_api::prelude","","","","","","","","","extendr_api::prelude::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude","extendr_api::prelude::iter","","","","","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude::iter","extendr_api::prelude","","","","","","","","","","","","","","","extendr_api::prelude::iter","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::prelude::iter","","extendr_api::prelude","extendr_api::prelude::iter","extendr_api::prelude","extendr_api::prelude::iter","extendr_api::prelude","extendr_api::prelude::iter","","extendr_api::prelude","extendr_api::prelude::iter","extendr_api::prelude","extendr_api::prelude::iter","extendr_api::prelude","","extendr_api::prelude::iter","","extendr_api::prelude","extendr_api::prelude::iter","extendr_api::prelude","","extendr_api::prelude::iter","extendr_api::prelude","","","","","","","","","","","","","","","","","","","extendr_api::iter","extendr_api","","","extendr_api::robj","extendr_api::wrapper::matrix","extendr_api","extendr_api::wrapper::list","extendr_api::wrapper::nullable","extendr_api::wrapper::pairlist","extendr_api::wrapper::function","extendr_api::wrapper::raw","extendr_api::wrapper::character","extendr_api::wrapper::environment","extendr_api::wrapper::list","extendr_api::wrapper::expr","extendr_api::wrapper::lang","extendr_api::wrapper::symbol","extendr_api::wrapper::primitive","extendr_api::wrapper::promise","extendr_api","","","","extendr_api::logical","","extendr_api::robj","","","","","","","","extendr_api::logical","extendr_api::robj","extendr_api::error","","","extendr_api::logical","","extendr_api::robj","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::pairlist","extendr_api::wrapper::symbol","extendr_api::robj","","","","","","","","","","","extendr_api::iter","","extendr_api::wrapper::list","","extendr_api::wrapper::pairlist","extendr_api::iter","","","","","","extendr_api::wrapper::environment","extendr_api::wrapper::list","","","extendr_api::wrapper::pairlist","extendr_api::iter","extendr_api::logical","extendr_api::robj","extendr_api::wrapper::character","extendr_api::wrapper::environment","","extendr_api::wrapper::expr","extendr_api::wrapper::function","extendr_api::wrapper::lang","extendr_api::wrapper::list","","extendr_api::wrapper::nullable","extendr_api::wrapper::pairlist","","extendr_api::wrapper::primitive","extendr_api::wrapper::promise","extendr_api::wrapper::raw","extendr_api::wrapper::symbol","extendr_api::iter","","extendr_api::robj","extendr_api::wrapper::list","","extendr_api::wrapper::pairlist","extendr_api::error","","extendr_api::logical","","extendr_api::metadata","","","","","","","","extendr_api::robj","","","","extendr_api::wrapper::character","","extendr_api::wrapper::environment","","extendr_api::wrapper::expr","","extendr_api::wrapper::function","","extendr_api::wrapper::lang","","extendr_api::wrapper::list","","extendr_api::wrapper::matrix","","extendr_api::wrapper::nullable","","extendr_api::wrapper::pairlist","","extendr_api::wrapper::primitive","","extendr_api::wrapper::promise","","extendr_api::wrapper::raw","","extendr_api::wrapper::symbol","","extendr_api","extendr_api::wrapper::matrix","extendr_api::wrapper::pairlist","extendr_api::wrapper::function","extendr_api::wrapper::raw","extendr_api::wrapper::character","extendr_api::wrapper::environment","extendr_api::wrapper::list","extendr_api::wrapper::expr","extendr_api::wrapper::lang","extendr_api::wrapper::symbol","extendr_api::wrapper::primitive","extendr_api::wrapper::promise","extendr_api::error","extendr_api::wrapper::list","extendr_api::wrapper::pairlist","extendr_api::iter","extendr_api::wrapper::environment","extendr_api::logical","extendr_api::metadata","","","","extendr_api::robj","extendr_api::wrapper::character","extendr_api::wrapper::environment","extendr_api::wrapper::expr","extendr_api::wrapper::function","extendr_api::wrapper::lang","extendr_api::wrapper::list","extendr_api::wrapper::matrix","extendr_api::wrapper::nullable","extendr_api::wrapper::pairlist","extendr_api::wrapper::primitive","extendr_api::wrapper::promise","extendr_api::wrapper::raw","extendr_api::wrapper::symbol","extendr_api","extendr_api::error","extendr_api::robj","","","","extendr_api::wrapper::matrix","","extendr_api::logical","extendr_api::wrapper::list","","extendr_api","","","extendr_api::wrapper::pairlist","","extendr_api::wrapper::function","extendr_api::wrapper::raw","extendr_api::wrapper::character","extendr_api::wrapper::environment","extendr_api::wrapper::list","extendr_api::wrapper::expr","extendr_api::wrapper::lang","extendr_api::wrapper::symbol","extendr_api::wrapper::primitive","extendr_api::wrapper::promise","extendr_api::error","extendr_api::robj","extendr_api::preludeextendr_api::prelude::iter","","","","extendr_api::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::robj","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error handling in Rust called from R.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a global variable from global_env() and ancestors. If …","Get a local variable from current_env() and ancestors.","Get a global function from global_env() and ancestors.","Find a namespace by name.","The current interpreter environment.","The “global” environment","An empty environment at the root of the environment tree","The base environment; formerly R_NilValue","The namespace for base.","For registered namespaces.","Current srcref, for debuggers","The nil object","NA_STRING as a CHARSXP","“” as a CHARSXP","“” as a STRSXP","Special “NA” string that represents null strings.","Parse a string into an R executable object","Parse a string into an R executable object and run it. …","Parse a string into an R executable object and run it …","Find a function or primitive that may be in a namespace.","","Generalised iterator of numbers and logical. See Int, …","","","Iterator over name-value pairs in lists.","Iterator over primitives in integer objects.","Iterator over primitives in real objects.","Iterator over primitives in logical objects.","Iterator over strings or string factors.","Make an empty str iterator.","","Argument parsing and checking.","","Bool is a wrapper for i32 in the context of an R’s …","","Convert this Bool to a bool. Note NA will be true.","Convert this construct a Bool from a rust boolean.","Test if TRUE","Test if FALSE","Module metadata","Metadata function argument.","","","Metadata function.","","","","","","","Metadata Impl.","","","","Module metadata.","","","","","Maintain ownership of R objects.","","","Common exports for extendr-api.","Trait used for incomming parameter conversion.","","","","Extensions to iterators for R objects including […","Convert a wide range of iterators to Robj.","ndarray prelude.","An array where the data has shared ownership and is copy …","An array that owns its data uniquely.","An <em>n</em>-dimensional array.","A read-only array view.","A read-write array view.","An array with copy-on-write behavior.","A read-only array view without a lifetime.","A mutable array view without a lifetime.","An array where the data has shared ownership and is copy …","An axis index.","","Dimension description.","Create a new dimension value.","Array shape and index trait.","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","<code>SliceArg</code> is the type which is used to specify slicing for …","Pattern matching friendly form of the dimension value.","Next smaller dimension (if applicable)","Next larger dimension","Returns the number of dimensions (number of axes).","Convert the dimension into a pattern matching friendly …","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","Borrow as a read-only array view.","Borrow as a read-write array view.","Creates a dimension of all zeros with the specified ndim.","Convert the dimensional into a dynamic dimensional …","This trait is private to implement; this method exists to …","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","dynamic-dimensional array","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","zero-dimensionial","Create a zero-dimensional index","one-dimensional","Create a one-dimensional index","two-dimensional","Create a two-dimensional index","three-dimensional","Create a three-dimensional index","four-dimensional","Create a four-dimensional index","five-dimensional","Create a five-dimensional index","six-dimensional","Create a six-dimensional index","dynamic-dimensional","Create a dynamic-dimensional index","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Array zip macro: lock step function application across …","Slice argument constructor.","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","","","","","","","Argument conversion into an array view","Floating-point element types <code>f32</code> and <code>f64</code>.","Array index type","Array index type (signed)","An <em>n</em>-dimensional array.","An array where the data has shared ownership and is copy …","An array where the data has shared ownership and is copy …","An array that owns its data uniquely.","An array with copy-on-write behavior.","A read-only array view.","A read-write array view.","A read-only array view without a lifetime.","A mutable array view without a lifetime.","ArcArray’s representation.","Array pointer’s representation.","Array view’s representation.","CowArray’s representation.","Borrowed data.","Owned data.","Linear algebra.","General matrix-matrix multiplication.","General matrix-vector multiplication.","Matrix Multiplication","The result of the operation.","","A contiguous array shape of n dimensions.","An array shape of n dimensions in c-order, f-order or …","An axis index.","","Description of the axis, its length and its stride.","","","","Array shape and index trait.","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","<code>SliceArg</code> is the type which is used to specify slicing for …","Pattern matching friendly form of the dimension value.","Next smaller dimension (if applicable)","Next larger dimension","Returns the number of dimensions (number of axes).","Convert the dimension into a pattern matching friendly …","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","Borrow as a read-only array view.","Borrow as a read-write array view.","Creates a dimension of all zeros with the specified ndim.","Convert the dimensional into a dynamic dimensional …","This trait is private to implement; this method exists to …","Argument conversion a dimension.","","","Array shape with a next smaller dimension.","","Dynamic dimension or index type.","Tuple or fixed size arrays that can be used to index an …","Error code for an error related to array shape or layout.","incompatible shape","incompatible memory layout","the shape does not fit inside type limits","out of bounds indexing","aliasing array elements","overflow when computing offset, length, etc.","An error related to array shape or layout.","Create an iterable of the array shape <code>shape</code>.","Return an iterable of the indices of the passed-in array.","A slice (range with step size).","","","","Represents all of the necessary information to perform a …","A slice (range with step) or an index.","A range with step size. <code>end</code> is an exclusive index. …","","","","A single index.","Argument conversion into an array view","Elements that support linear algebra operations.","Floating-point element types <code>f32</code> and <code>f64</code>.","Stack arrays along the given axis.","Stack arrays along the given axis.","Extra indexing methods for array views","The type of the reference to the element that is …","Get a reference of a element through the view.","Get a reference of a element through the view.","Get a reference of a element through the view without …","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","","","","","","","A producer element that can be assigned to once","Assign the value <code>input</code> to the element that self …","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","The array element type.","This trait is private to implement; this method exists to …","Array representation trait.","Array representation trait.","Array representation trait.","The resulting array storage of the same kind but …","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Producers, iterables and iterators.","An iterator over the length and stride of each axis of an …","Indices producer and iterable.","An iterator over the indexes of an array shape.","An iterator that traverses over the specified axis and …","An iterator that traverses over the specified axis and …","An iterator that traverses over an axis and and yields …","An iterator that traverses over an axis and and yields …","Exact chunks producer and iterable.","Exact chunks iterator.","Exact chunks iterator.","Exact chunks producer and iterable.","An iterator over the indexes and elements of an array.","An iterator over the indexes and elements of an array …","An iterator over the elements of an array.","An iterator over the elements of an array (mutable).","See <code>.lanes()</code> for more information.","An iterator that traverses over all axes but one, and …","An iterator that traverses over all dimensions but the …","See <code>.lanes_mut()</code> for more information.","Window producer and iterable","Slice argument constructor.","Array zip macro: lock step function application across …","Value controlling the execution of <code>.fold_while</code> on <code>Zip</code>.","Continue folding with this value","Fold is complete and will return this value","Argument conversion into a producer.","The element produced per iteration.","Dimension type of the producer","","Convert the value into an <code>NdProducer</code>.","A producer of an n-dimensional set of elements; for …","The element produced per iteration.","Dimension type","This trait is private to implement; this method exists to …","Lock step function application across several arrays or …","Array’s representation.","ArcArray’s representation.","Elements that can be used as direct operands in …","Create a new dimension value.","Create a zero-dimensional index","Create a one-dimensional index","Create a two-dimensional index","Create a three-dimensional index","Create a four-dimensional index","Create a five-dimensional index","Create a six-dimensional index","Create a dynamic-dimensional index","zero-dimensionial","one-dimensional","two-dimensional","three-dimensional","four-dimensional","five-dimensional","six-dimensional","dynamic-dimensional","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","dynamic-dimensional array","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","one-dimensional shared ownership array","two-dimensional shared ownership array","one-dimensional shared ownership array","two-dimensional shared ownership array","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create a two-dimensional read-write array view with …","Fixed-size array used for array initialization","","","","Create a two-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Dimension description.","","Define a module and export symbols to R Example:","Create a Pairlist R object from a list of name-value …","Execute R code by parsing and evaluating tokens but …","Execute R code by parsing and evaluating tokens.","Simple and safe type conversions that may fail in a …","The type returned in the event of a conversion error.","Performs the conversion.","An attempted conversion that consumes <code>self</code>, which may or …","The type returned in the event of a conversion error.","Performs the conversion.","Used for indexing operations (<code>container[index]</code>) in …","The returned type after indexing.","Performs the indexing (<code>container[index]</code>) operation.","rmacros - a set of macros to call actual R functions in a …","R object handling.","","Convert a wide range of iterators to Robj.","Trait used for incomming parameter conversion.","","","","<code>ToVectorValue</code> is a trait that allows many different types …","","","","","","","Extensions to iterators for R objects including […","Convert a wide range of iterators to Robj.","Wrapper for an R S-expression pointer (SEXP).","Get the type of an R object.","Get the extended length of the object.","Returns <code>true</code> if the <code>Robj</code> contains no elements.","Is this object is an NA scalar? Works for character, …","Get a read-only reference to the content of an integer …","Get an iterator over integer elements of this slice.","Get a Vec copied from the object.","Get a read-only reference to the content of a logical …","Get a Vec copied from the object using the tri-state [Bool…","Get an iterator over logical elements of this slice.","Get a read-only reference to the content of a double …","Get an iterator over real elements of this slice.","Get a Vec copied from the object.","Get a read-only reference to the content of an integer or …","Get a read-write reference to the content of an integer …","Get a read-write reference to the content of a double …","Get a read-write reference to the content of a raw vector.","Get a vector of owned strings. Owned strings have long …","Get a vector of string references. String references …","Get a read-only reference to a scalar string type.","Get a scalar integer.","Get a scalar real.","Get a scalar rust boolean.","Get a scalar boolean as a tri-boolean [Bool] value.","Evaluate the expression in R and return an error or an R …","Evaluate the expression in R and return an error or an R …","Evaluate the expression and return NULL or an R object.","Generic access to typed slices in an Robj.","","","Get a specific attribute as a borrowed robj if it exists.","Set a specific attribute and return the object.","Get the names attribute as a string iterator if one …","Set the names attribute from a string iterator.","Get the dim attribute as an integer iterator if one …","Get the dimnames attribute as a list iterator if one …","Get the class attribute as a string iterator if one …","Set the class attribute from a string iterator, returning …","Return true if this class inherits this class.","Get the levels attribute as a string iterator if one …","Provide limited protection for multithreaded access to …","","Run a function single threaded. Note: This will fail …","","Wrap an R function such as Rf_findFunction and convert …","Wrappers are lightweight proxies for references to R …","","Wrapper for creating character objects. These are used …","Make a character object from a string.","Get the string from a character object. If the string is …","","","Create a new, empty environment.","Create a new, empty environment with a reserved size.","Make an R environment object.","Get the enclosing (parent) environment.","Set the enclosing (parent) environment.","Get the environment flags.","Set the environment flags.","Iterate over an environment.","Get the names in an environment.","Set or define a variable in an enviroment.","Get a variable from an enviroment, but not its ancestors.","Iterator over the names and values of an environment","","","Wrapper for creating Expression (EXPRSXP) objects.","Return an iterator over the values of this expression …","","Wrapper for creating functions (CLOSSXP).","Make a function from parts.","Do the equivalent of x(a, b, c)","Get the formal arguments of the function.","Get the body of the function.","Get the environment of the function.","","Wrapper for creating language objects.","","","","","","","Create a new, empty list.","Wrapper for creating list (VECSXP) objects.","","Return an iterator over the values of this list.","Return an iterator over the names and values of this list.","Iterator over the objects in a VECSXP, EXPRSXP or …","","You can use the FromList wrapper to coerce a Robj into a …","","Wrappers for matrices with deferred arithmetic.","Wrapper for creating and using matrices and arrays.","","","","","Get the underlying data fro this array.","Get the dimensions for this array.","Make a new column type.","Get the number of rows.","Make a new column type.","Get the number of rows.","Create a new matrix wrapper. Make a new column type.","Get the number of rows.","Get the number of columns.","Create a new matrix wrapper. Make a new column type.","Get the number of rows.","Get the number of columns.","","Get the number of rows.","Get the number of columns.","Get the number of submatrices.","","Get the number of rows.","Get the number of columns.","Get the number of submatrices.","","","","","Wrapper for handling potentially NULL values.","","","A pairlist is a linked list of values with optional …","","Convert an iterator of names and values to a pairlist …","Generate paits of names and values.","","","Generate paits of names and values.","Make an empty pairlist iterator.","","Wrapper for creating primitive objects.","Make a Primitive object from a string.","","Wrapper for creating promises (PROMSXP).","Make a Promise from parts.","Get the code to be executed from the promise.","Get the environment for the execution from the promise.","Get the value of the promise, once executed.","Get the seen flag (avoids recursion).","If this promise has not been evaluated, evaluate it, …","","Wrapper for creating raw (byte) objects.","","Get a slice of bytes from the Raw object.","","Wrapper for creating symbol objects.","Make a symbol object from a string.","Get the string from a symbol object.","Unbound marker","Missing argument marker","“base”","“{”","“[[”","“[”","“class”","“.Device”","“dimnames”","“dim”","“$”","“…”","“::”","“.Last.value”","“levels”","“mode”","“na.rm”","“name”","“names”","<em>NAMESPACE</em>_.“","“package”","“previous”","“quote”","“row.names”","“.Random.seed”","“sort.list”","“source”","“spec”","“tsp”","“:::”","“.defined”","“.Method”","“packageName”","“.target”","Convert a symbol object to a Symbol wrapper.","Convert a character object to a Character wrapper.","Convert a raw object to a Character wrapper.","Convert a language object to a Language wrapper.","Convert a pair list object (LISTSXP) to a Pairlist …","Convert a list object (VECSXP) to a List wrapper.","Convert an expression object (EXPRSXP) to a Expr wrapper.","Convert an environment object (ENVSXP) to a Env wrapper.","Convert a function object (CLOSXP) to a Function wrapper.","Get a wrapper for a promise.","","","","Simple and safe type conversions that may fail in a …","The type returned in the event of a conversion error.","Performs the conversion.","An attempted conversion that consumes <code>self</code>, which may or …","The type returned in the event of a conversion error.","Performs the conversion.","Used for immutable dereferencing operations, like <code>*v</code>.","The resulting type after dereferencing.","Dereferences the value.","","Define a module and export symbols to R Example:","Create a Pairlist R object from a list of name-value …","Execute R code by parsing and evaluating tokens.","Execute R code by parsing and evaluating tokens but …","TRUE value eg. <code>r!(TRUE)</code>","FALSE value eg. <code>r!(FALSE)</code>","NULL value eg. <code>r!(NULL)</code>","NA value for integers eg. <code>r!(NA_INTEGER)</code>","NA value for real values eg. <code>r!(NA_REAL)</code>","NA value for strings. <code>r!(NA_STRING)</code>","NA value for logical. <code>r!(NA_LOGICAL)</code>","Return true if this primitive is NA.","","Type of R objects used by [Robj::rtype].","","","","","","","","","","","","","","","","","","","","","","","","","","The call! macro calls an R function with Rust parameters. …","A macro for constructing R langage objects.","Convert a rust expression to an R object.","Get a local variable from the calling function or a …","Get a global variable.","The sym! macro install symbols. You should cache your …","Create a list.","Create a dataframe.","Create a factor.","Print via the R output stream.","Print with a newline via the R output stream.","Print via the R error stream.","Print with a newline via the R output stream.","Macro for running testsreate a one-dimensional array from an iterable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a mutable array view to a mutable reference of a …","Convert a mutable array view to a mutable reference of a …","Convert a mutable array view to a mutable reference of a …","","","","","","","","","","","","","","","","","","","","","","","","","Self is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Self is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","","","","","","","","Self is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","","","","Create a read-write array view of the array.","","","Create a read-only array view of the array.","","","","","Create a <code>Shape</code> from <code>dimension</code>, using the default memory …","","","","","Create a one-dimensional read-only array view of the data …","","","","","","","","","Converts the <code>Vec</code> of arrays to an owned 3-D array.","","","Converts the <code>Vec</code> of arrays to an owned 2-D array.","","","","Create a one-dimensional array from a vector (no copying …","","","","","","","","","","Create a one-dimensional read-write array view of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the dot product of one-dimensional arrays.","","Perform the matrix multiplication of the row vector <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform an elementwise unary not of <code>self</code> and return the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform an elementwise negation of <code>self</code> and return the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …","","","","","","","","","","","","","","","","","","","Convert an object that may be null to a rust type.","","","","","","","","","","","","Convert an R object to a <code>ndarray</code> ArrayView1.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a real iterator into a vector.","Convert an integer iterator into a vector.","Convert a logical iterator into a vector.","Convert a hashmap into a list.","Convert a vector of Robj into a list.","You can return a ListIter from a function.","Convert a column, matrix or matrix3d to an Robj.","Convert a rust object to NULL or another type.","You can return a PairlistIter from a function.","Construct a NULL pairlist (which is a NULL).","Convert a string to a symbol.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","","","Length of a list iterator.","Convert a List into an interator, consuming the list.","Convert a PairList into an interator, consuming the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","Make a wrapper behave like an Robj.","","","","","","","","","","","","","","","","","","","","","","","","","","","Divide two R objects, consuming the left hand side. …","Subtract two R objects, consuming the left hand side. …","Add two R objects, consuming the left hand side. panics …","Multiply two R objects, consuming the left hand side. …","Zero-based indexing in row, column order.","Zero-based mutable indexing in row, column order.","","You can use the FromList wrapper to coerce a Robj into a …","You can pass a ListIter to a function.","","","","You can pass a PairlistIter to a function.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","Make a wrapper from a robj if it matches.","","Get an iterator over a string vector. Returns None if the …","Create a one-dimensional array from a vector (no copying …","Create a one-dimensional array with <code>n</code> evenly spaced …","Create a one-dimensional array with elements from <code>start</code> …","Create a one-dimensional array with <code>n</code> logarithmically …","Create a one-dimensional array with <code>n</code> geometrically …","Create an identity matrix of size <code>n</code> (square 2D array).","Create a 2D matrix from its diagonal","Create an array with copies of <code>elem</code>, shape <code>shape</code>.","Create an array with zeros, shape <code>shape</code>.","Create an array with ones, shape <code>shape</code>.","Create an array with default values, shape <code>shape</code>","Create an array with values created by the function <code>f</code>.","Create an array with values created by the function <code>f</code>.","Create an array with the given shape from a vector. (No …","Creates an array from a vector and interpret it according …","Create an array with uninitalized elements, shape <code>shape</code>.","Create an array with uninitalized elements, shape <code>shape</code>.","Return the total number of elements in the array.","Return the length of <code>axis</code>.","Return whether the array has any elements","Return the number of dimensions (axes) in the array","Return the shape of the array in its “pattern” form, …","Return the shape of the array as it stored in the array.","Return the shape of the array as a slice.","Return the strides of the array as a slice.","Return the stride of <code>axis</code>.","Return a read-only view of the array","Return a read-write view of the array","Return an uniquely owned copy of the array.","Return a shared ownership (copy on write) array.","Turn the array into a uniquely owned array, cloning the …","Turn the array into a shared ownership (copy on write) …","Returns a reference to the first element of the array, or …","Returns a mutable reference to the first element of the …","Return an iterator of references to the elements of the …","Return an iterator of mutable references to the elements …","Return an iterator of indexes and references to the …","Return an iterator of indexes and mutable references to …","Return a sliced view of the array.","Return a sliced read-write view of the array.","Return multiple disjoint, sliced, mutable views of the …","Slice the array, possibly changing the number of …","Slice the array in place without changing the number of …","Slice the array in place without changing the number of …","Return a view of the array, sliced along the specified …","Return a mutable view of the array, sliced along the …","Slice the array in place along the specified axis.","Return a reference to the element at <code>index</code>, or return <code>None</code>…","Return a mutable reference to the element at <code>index</code>, or …","Perform <em>unchecked</em> array indexing.","Perform <em>unchecked</em> array indexing.","Swap elements at indices <code>index1</code> and <code>index2</code>.","Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.","Returns a view restricted to <code>index</code> along the axis, with …","Returns a mutable view restricted to <code>index</code> along the …","Collapses the array to <code>index</code> along the axis and removes …","Selects <code>index</code> along the axis, collapsing the axis into …","Along <code>axis</code>, select the subview <code>index</code> and return a view …","Along <code>axis</code>, select the subview <code>index</code> and return a …","Collapse dimension <code>axis</code> into length one, and select the …","Along <code>axis</code>, select the subview <code>index</code> and return <code>self</code> with …","Along <code>axis</code>, select arbitrary subviews corresponding to …","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over all 1D …","Return a producer and iterable that traverses over all 1D …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an exact chunks producer (and iterable).","Return an exact chunks producer (and iterable).","Return a window producer and iterable.","Return an view of the diagonal elements of the array.","Return a read-write view over the diagonal elements of …","Return the diagonal as a one-dimensional array.","Return <code>true</code> if the array data is laid out in contiguous …","Return a standard-layout array containing the data, …","Return a pointer to the first element in the array.","Return a mutable pointer to the first element in the …","Return a raw view of the array.","Return a raw mutable view of the array.","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice if it is contiguous, …","Transform the array into <code>shape</code>; any shape with the same …","<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for …","Convert any array or array view to a dynamic dimensional …","Convert an array or array view to another with the same …","Act like a larger size and/or shape array by <em>broadcasting</em> …","Swap axes <code>ax</code> and <code>bx</code>.","Permute the axes.","Transpose the array by reversing axes.","Return a transposed view of the array.","Return an iterator over the length and stride of each …","Return the axis with the greatest stride (by absolute …","Reverse the stride of <code>axis</code>.","If possible, merge in the axis <code>take</code> to <code>into</code>.","Insert new array axis at <code>axis</code> and return the result.","Remove array axis <code>axis</code> and return the result.","Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.","Perform an elementwise assigment to <code>self</code> from element <code>x</code>.","Traverse two arrays in unspecified order, in lock step, …","Traverse the array elements and apply a fold, returning …","Call <code>f</code> by reference on each element and create a new array…","Call <code>f</code> on a mutable reference of each element and create …","Call <code>f</code> by <strong>v</strong>alue on each element and create a new array …","Call <code>f</code> by <strong>v</strong>alue on each element, update the array with …","Modify the array in place by calling <code>f</code> by mutable …","Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …","Visit each element in the array by calling <code>f</code> by reference …","Fold along an axis.","Reduce the values along an axis into just one value, …","Reduce the values along an axis into just one value, …","Iterates over pairs of consecutive elements along the …","Returns the single element in the array without cloning …","Return a vector of the elements in the array, in the way …","<strong>Promise</strong> that the array’s elements are all fully …","Return an vector with the elements of the one-dimensional …","Return an array view of row <code>index</code>.","Return a mutable array view of row <code>index</code>.","Return the number of rows (length of <code>Axis(0)</code>) in the …","Return the number of rows (length of <code>Axis(0)</code>) in the …","Return an array view of column <code>index</code>.","Return a mutable array view of column <code>index</code>.","Return the number of columns (length of <code>Axis(1)</code>) in the …","Return the number of columns (length of <code>Axis(1)</code>) in the …","Return true if the array is square, false otherwise.","Insert new array axis of length 1 at <code>axis</code>, modifying the …","Collapses the array to <code>index</code> along the axis and removes …","Return the sum of all elements in the array.","Returns the arithmetic mean x̅ of all elements in the …","Return the sum of all elements in the array.","Return the product of all elements in the array.","Return sum along <code>axis</code>.","Return mean along <code>axis</code>.","Return variance along <code>axis</code>.","Return standard deviation along <code>axis</code>.","Return <code>true</code> if the arrays’ elementwise differences are …","Perform dot product or matrix multiplication of arrays …","Perform matrix multiplication of rectangular arrays <code>self</code> …","Perform the operation <code>self += alpha * rhs</code> efficiently, …","Create a read-only array view borrowing its data from a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create a read-write array view borrowing its data from a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Consume the view and return a reference to the single …","Consume the mutable view and return a mutable reference …","Return the array’s data as a slice, if it is contiguous …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one mutable …","Split the view into multiple disjoint slices.","Create an <code>RawArrayView<A, D></code> from shape information and a …","Converts to a read-only view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Converts to a read-only view of the array.","Converts to a mutable view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the array is the owned variant.","Return the index of the axis.","Create a new dimension value with <code>n</code> axes, all zeros","Returns <code>true</code> iff the data is the <code>View</code> variant.","Returns <code>true</code> iff the data is the <code>Owned</code> variant.","Return the size of the shape in number of elements","Return axis","Return length","Return stride","Return the <code>ErrorKind</code> of this error.","Create a new <code>ShapeError</code>","Create a new <code>Slice</code> with the given extents.","Create a new <code>Slice</code> with the given step size (multiplied …","Returns a new <code>SliceInfo</code> instance.","Returns the number of dimensions after calling <code>.slice()</code> …","Returns <code>true</code> if <code>self</code> is a <code>Slice</code> value.","Returns <code>true</code> if <code>self</code> is an <code>Index</code> value.","Returns a new <code>SliceOrIndex</code> with the given step size …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","Return the inner value","Return true if it is <code>Done</code>, false if <code>Continue</code>","Create a new <code>Zip</code> from the input array or other producer <code>p</code>.","Create a new <code>Zip</code> with an index producer and the producer <code>p</code>…","Return a the number of element tuples in the Zip","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Apply and collect the results into a new array, which has …","Apply and assign the results into the producer <code>into</code>, …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Apply and collect the results into a new array, which has …","Apply and assign the results into the producer <code>into</code>, …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Apply and collect the results into a new array, which has …","Apply and assign the results into the producer <code>into</code>, …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Apply and collect the results into a new array, which has …","Apply and assign the results into the producer <code>into</code>, …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Apply and collect the results into a new array, which has …","Apply and assign the results into the producer <code>into</code>, …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Split the <code>Zip</code> evenly in two.","","","","","","","Do the equivalent of x$y","Do the equivalent of <code>x[y]</code>","Do the equivalent of <code>x[[y]]</code>","Do the equivalent of x ~ y","Do the equivalent of x :: y","Do the equivalent of x(a, b, c)","Return true if this is the null object.","Return true if this is a symbol.","Return true if this is a boolean (logical) vector","Return true if this is a real (f64) vector.","Return true if this is a complex vector.","Return true if this is an expression.","Return true if this is an environment.","Return true if this is an environment.","Return true if this is a string.","Return true if this is an object.","Get the source ref.","Get the source filename.","Convert to a string vector.","Convert to vectors of many kinds.","Convert a pairlist (LISTSXP) to a vector list (VECSXP).","Convert a vector list (VECSXP) to a pair list (LISTSXP)","Convert a factor to a string vector.","Allocate a matrix object.","Do a deep copy of this object. Note that clone() only …","Find a function in an environment ignoring other …","Find a variable in an environment.","If this object is a promise, evaluate it, otherwise …","Number of columns of a matrix","Number of rows of a matrix","Copy a vector and resize it. See. …","Allocated an owned object of a certain type.","Return true if two arrays have identical dims.","Return true if this is an array.","Return true if this is factor.","Return true if this is a data frame.","Return true if this is a function.","Return true if this is an integer vector (INTSXP) but not …","Return true if this is a language object (LANGSXP).","Return true if this is NILSXP or LISTSXP.","Return true if this is a matrix.","Return true if this is NILSXP or VECSXP.","Return true if this is INTSXP, LGLSXP or REALSXP but not …","Return true if this is a primitive function BUILTINSXP, …","Return true if this is a time series vector (see tsp).","Return true if this is a user defined binop.","Return true if this is a valid string.","Return true if this is a valid string.","Return true if this is a vector.","Return true if this is an atomic vector.","Return true if this is a vector list.","Return true if this is can be made into a vector.","Return true if this is RAWSXP.","Return true if this is CHARSXP.","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,3,3,0,0,0,4,4,4,4,4,0,0,5,5,0,6,6,6,6,6,6,0,7,7,7,0,8,8,8,8,0,0,0,0,0,9,0,10,0,11,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,0,0,0,16,16,0,0,0,12,0,17,17,17,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,18,18,0,19,0,0,0,20,20,20,20,20,20,0,0,0,0,21,21,21,0,0,22,23,23,23,22,0,0,0,0,0,0,24,24,24,24,0,14,14,14,14,14,14,0,25,0,0,0,0,0,0,26,26,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,28,0,29,29,29,29,0,30,30,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,31,0,0,0,0,0,0,0,0,0,0,0,32,32,0,33,33,0,34,34,0,0,9,11,0,9,0,10,0,35,35,35,35,35,35,0,11,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,36,36,36,36,36,36,36,36,36,36,0,0,0,0,0,0,0,0,38,38,0,0,39,39,39,39,39,39,39,39,39,39,39,0,0,0,40,40,0,0,41,41,41,41,41,0,0,42,42,42,42,0,0,43,43,43,43,43,0,44,0,45,0,0,0,0,0,46,46,46,46,46,47,47,46,46,46,48,48,48,46,46,46,46,49,49,49,49,36,36,36,0,0,50,50,0,0,51,51,51,51,0,52,0,0,53,0,0,54,54,54,54,54,54,0,0,55,55,0,0,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,0,57,0,0,32,32,0,33,33,0,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,61,61,61,61,61,61,61,61,61,61,61,12,12,12,12,12,12,12,12,12,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,15,15,15,15,15,15,15,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,17,17,17,17,17,17,17,17,17,68,68,68,68,68,68,68,68,68,68,68,68,68,20,20,20,20,20,20,20,20,20,69,69,69,69,69,69,69,69,69,69,21,21,21,21,21,21,21,21,21,70,70,70,70,70,70,70,70,70,22,22,22,22,22,22,22,22,22,22,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,28,28,28,28,28,28,28,28,28,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,36,36,36,36,36,36,36,36,36,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,93,93,93,93,93,93,93,93,93,93,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,60,60,60,60,60,60,60,61,61,61,74,75,77,71,85,85,85,76,84,84,84,12,61,62,68,22,21,61,12,22,69,61,61,61,62,62,61,92,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,61,61,62,61,61,62,62,15,15,65,65,64,64,92,92,63,63,61,61,61,61,62,61,61,62,61,61,61,61,70,70,72,61,86,81,78,90,89,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,61,22,21,21,22,21,21,22,61,22,21,61,22,21,21,22,66,22,21,21,68,61,21,22,22,21,61,68,22,21,61,21,22,61,61,67,21,61,22,22,22,22,22,21,22,22,21,61,22,22,72,61,61,77,76,61,61,92,65,15,65,63,61,61,83,83,79,79,75,75,84,84,84,84,84,84,84,84,84,84,84,84,88,88,77,77,85,85,85,85,85,85,85,85,85,85,85,85,71,71,71,80,80,73,73,73,74,74,87,87,76,76,82,82,61,77,76,84,87,82,83,88,85,61,61,61,61,66,66,66,66,61,61,61,63,63,92,92,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,61,64,65,63,65,92,15,64,76,70,66,62,63,91,22,69,67,17,21,12,61,92,20,68,71,72,28,62,61,61,62,61,61,68,61,61,61,61,61,62,61,62,68,62,62,62,62,62,62,62,61,61,62,62,69,68,68,62,22,22,62,62,12,12,61,20,21,21,62,62,62,62,62,62,62,64,92,92,15,65,63,64,68,62,62,62,62,62,62,62,61,62,61,61,68,62,61,62,61,62,61,62,61,68,86,90,91,78,62,76,63,73,82,64,84,69,71,65,67,87,79,66,74,28,70,72,21,22,20,17,12,92,92,61,61,61,61,61,61,61,61,12,68,68,70,3,94,95,96,36,46,49,44,50,51,41,55,38,39,43,40,42,56,53,54,97,98,98,98,4,4,36,36,36,36,36,36,36,36,4,36,1,1,1,4,4,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,51,56,36,36,36,36,36,36,36,36,36,36,36,2,3,44,43,51,2,2,2,3,3,3,93,44,44,44,52,3,4,36,38,39,93,40,41,42,43,44,50,51,52,53,54,55,56,2,3,36,43,44,52,1,1,4,4,5,5,6,6,7,7,8,8,36,36,36,36,38,38,39,39,40,40,41,41,42,42,43,43,46,46,50,50,51,51,53,53,54,54,55,55,56,56,60,46,51,41,55,38,39,43,40,42,56,53,54,1,44,52,3,93,4,5,6,7,8,36,38,39,40,41,42,43,46,50,51,53,54,55,56,60,1,36,36,36,36,46,46,4,45,44,47,48,49,52,51,41,55,38,39,43,40,42,56,53,54,1,36,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,12,62,15,15,66,17,17,17,69,69,21,21,70,70,22,22,22,74,75,76,77,28,28,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["robj",4],["into",8]],[["robj",4],["result",6]]],[[["robj",4],["into",8]],[["robj",4],["result",6]]],[[["robj",4],["into",8]],[["robj",4],["result",6]]],[[["robj",4],["into",8]],[["environment",3],["result",6]]],[[],["environment",3]],[[],["environment",3]],[[],["environment",3]],[[],["environment",3]],[[],["environment",3]],[[],["environment",3]],[[],["robj",4]],[[],["robj",4]],[[],["robj",4]],[[],["robj",4]],[[],["robj",4]],[[],["str",15]],[[["str",15]],[["robj",4],["result",6]]],[[["str",15]],[["robj",4],["result",6]]],[[["str",15]],[["robj",4],["result",6]]],[[["str",15]],[["language",3],["result",6]]],null,null,[[]],[[["robj",4]]],null,null,null,null,null,[[]],[[["usize",15]],["striter",3]],null,null,null,null,[[],["bool",15]],[[["bool",15]]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15],["str",15]],[["result",6],["string",3]]],null,null,null,null,null,[[["robj",4]],[["str",15],["result",4]]],null,[[],["robj",4]],null,[[],["robj",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["arraybase",3],["viewrepr",3],["dim",3]]],[[],[["arraybase",3],["viewrepr",3],["dim",3]]],[[["usize",15]]],[[],[["dim",3],["ixdynimpl",3]]],[[],["privatemarker",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[],[["dim",3],["ixdynimpl",3]]],[[],[["arraybase",3],["ownedrepr",3],["dim",3]]],[[],[["ownedrepr",3],["dim",3],["arraybase",3]]],[[],[["dim",3],["ownedrepr",3],["arraybase",3]]],[[],[["dim",3],["viewrepr",3],["arraybase",3]]],[[],[["arraybase",3],["viewrepr",3],["dim",3]]],[[],[["dim",3],["arraybase",3],["viewrepr",3]]],[[],[["viewrepr",3],["dim",3],["arraybase",3]]],null,null,null,null,null,null,[[],["shape",3]],[[],["shape",3]],[[["bool",15]],["shape",3]],[[],["strideshape",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arraybase",3],["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["arraybase",3],["viewrepr",3],["dim",3]]],[[],[["arraybase",3],["viewrepr",3],["dim",3]]],[[["usize",15]]],[[],[["dim",3],["ixdynimpl",3]]],[[],["privatemarker",3]],null,null,[[]],null,[[["axis",3]]],null,null,null,null,null,null,null,null,null,null,[[],["indices",3]],[[["arraybase",3]],["indices",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["axis",3]],[["arraybase",3],["shapeerror",3],["result",4]]],null,null,null,[[]],[[],["option",4]],[[]],null,null,null,[[],["shape",3]],[[],["shape",3]],[[["bool",15]],["shape",3]],[[],["strideshape",3]],null,[[]],null,null,null,null,null,null,null,[[],["privatemarker",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[],["privatemarker",3]],null,null,null,null,[[]],[[],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[],[["dim",3],["ixdynimpl",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["arraybase",3],["ownedrepr",3],["dim",3]]],[[],[["ownedrepr",3],["dim",3],["arraybase",3]]],[[],[["dim",3],["arraybase",3],["ownedarcrepr",3]]],[[],[["dim",3],["viewrepr",3],["arraybase",3]]],[[],[["arraybase",3],["viewrepr",3],["dim",3]]],[[],[["dim",3],["arraybase",3],["viewrepr",3]]],[[],[["viewrepr",3],["dim",3],["arraybase",3]]],[[],[["viewrepr",3],["arraybase",3],["dim",3]]],null,null,[[]],[[],["usize",15]],[[],[["dim",3],["ownedrepr",3],["arraybase",3]]],[[],[["arraybase",3],["dim",3],["ownedarcrepr",3]]],[[],[["arraybase",3],["ownedrepr",3],["dim",3]]],[[],[["arraybase",3],["dim",3],["ownedarcrepr",3]]],null,null,null,null,null,null,null,null,[[],["result",4]],null,null,[[],["result",4]],null,null,[[]],null,null,[[["robj",4]],[["str",15],["result",4]]],[[],["robj",4]],null,[[["robj",4]],[["str",15],["result",4]]],null,[[],["robj",4]],null,[[],["sexptype",6]],[[],["f64",15]],[[],["i32",15]],[[],["i32",15]],[[],["u8",15]],[[],["sexp",6]],null,[[],["robj",4]],null,[[],["rtype",4]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],[["option",4],["int",6]]],[[],[["option",4],["vec",3]]],[[],["option",4]],[[],[["vec",3],["option",4]]],[[],[["option",4],["logical",6]]],[[],["option",4]],[[],[["option",4],["real",6]]],[[],[["vec",3],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["vec",3]]],[[],[["vec",3],["option",4]]],[[],[["option",4],["str",15]]],[[],[["option",4],["i32",15]]],[[],[["f64",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",3],["option",4]]],[[],[["robj",4],["result",6]]],[[["environment",3]],[["robj",4],["result",6]]],[[],["robj",4]],null,[[],["option",4]],[[],["option",4]],[[],[["robj",4],["option",4]]],[[],[["robj",4],["result",6]]],[[],[["striter",3],["option",4]]],[[],[["robj",4],["result",6]]],[[],[["option",4],["int",6]]],[[],[["option",4],["listiter",3]]],[[],[["striter",3],["option",4]]],[[],[["robj",4],["result",6]]],[[["str",15]],["bool",15]],[[],[["striter",3],["option",4]]],null,[[],["u32",15]],[[]],[[["asref",8],["str",15]]],[[],[["sexp",6],["result",6]]],null,null,null,[[["str",15]]],[[],["str",15]],null,null,[[["environment",3]]],[[["usize",15],["environment",3]]],[[["environment",3]]],[[],[["option",4],["environment",3]]],[[["environment",3]]],[[],["i32",15]],[[["i32",15]]],[[],["enviter",3]],[[]],[[["robj",4],["into",8]]],[[["robj",4],["into",8]],[["robj",4],["result",6]]],null,null,null,[[]],[[],["listiter",3]],null,null,[[["pairlist",3],["language",3],["environment",3]],["result",6]],[[["pairlist",3]],[["robj",4],["result",6]]],[[],["pairlist",3]],[[],["robj",4]],[[],["environment",3]],null,null,[[]],[[],["pairlistiter",3]],[[]],[[]],null,null,[[],["list",3]],[[]],[[]],[[],["listiter",3]],[[],["namedlistiter",6]],null,[[]],null,null,null,null,null,null,null,[[["robj",4]]],[[]],[[]],[[["usize",15],["fnmut",8]]],[[],["usize",15]],[[["usize",15],["fnmut",8]]],[[],["usize",15]],[[["usize",15],["clone",8],["fnmut",8]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15],["clone",8],["fnmut",8]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15],["fnmut",8],["clone",8]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15],["fnmut",8],["clone",8]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["rcolumn",6]]],[[],[["option",4],["rmatrix",6]]],[[],[["option",4],["rmatrix3d",6]]],null,null,null,null,null,null,[[]],[[],["pairlistiter",3]],[[]],[[]],null,[[]],null,null,[[["str",15]],["result",6]],null,null,[[["robj",4],["environment",3]],["result",6]],[[],["robj",4]],[[],["environment",3]],[[],["robj",4]],[[],["i32",15]],[[],[["robj",4],["result",6]]],null,null,[[]],[[]],null,null,[[["asref",8],["str",15]]],[[],["str",15]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],[["option",4],["symbol",3]]],[[],[["option",4],["character",3]]],[[],[["option",4],["raw",3]]],[[],[["option",4],["language",3]]],[[],[["pairlist",3],["option",4]]],[[],[["option",4],["list",3]]],[[],[["expression",3],["option",4]]],[[],[["option",4],["environment",3]]],[[],[["function",3],["option",4]]],[[],[["option",4],["promise",3]]],null,[[]],null,null,null,[[],["result",4]],null,null,[[],["result",4]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["option",4],["isize",15]]],[[],["isize",15]],[[],["shape",3]],[[],["shape",3]],[[["bool",15]],["shape",3]],[[],["strideshape",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["shape",3]],[[],["shape",3]],[[["bool",15]],["shape",3]],[[],["strideshape",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["dim",3],["arraybase",3]]],[[]],[[["arraybase",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["axis",3]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["usize",15]],["dim",3]],[[["dim",3]],["dim",3]],[[["arraybase",3]],["arraybase",3]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["dim",3]],[["option",4],["isize",15]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["dim",3]],["isize",15]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["dim",3]]],[[]],[[["arraybase",3]]],[[["usize",15]]],[[["dim",3]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[]],[[]],[[["arraybase",3]]],[[["dim",3]],["dim",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["usize",15]],["dim",3]],[[["arraybase",3]],["arraybase",3]],[[]],[[],["option",4]],[[]],[[],["sliceinfo",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]],["dim",3]],[[["dim",3]],[["dim",3],["option",4]]],[[["dim",3]],["bool",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],["dim",3]],[[],["dim",3]],[[["dim",3]],["axis",3]],[[["dim",3]],["axis",3]],[[],[["dim",3],["option",4]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]],["dim",3]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]],["dim",3]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[],["dim",3]],[[]],[[["usize",15]],["dim",3]],[[["dim",3]],[["option",4],["dim",3]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]],[["dim",3],["ixdynimpl",3]]],[[["axis",3]]],[[["axis",3]]],[[],[["option",4],["dim",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]],["dim",3]],[[["dim",3]],[["dim",3],["option",4]]],[[["dim",3]],["bool",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[["dim",3]],["axis",3]],[[],[["dim",3],["option",4]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]],["dim",3]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["dim",3]],[[["dim",3]],[["option",4],["dim",3]]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4],["isize",15]]],[[],["dim",3]],[[["axis",3]]],[[["axis",3]]],[[]],[[["arraybase",3]]],[[["isize",15],["rangetoinclusive",3]],["sliceorindex",4]],[[["usize",15],["rangetoinclusive",3]],["slice",3]],[[["usize",15],["rangefrom",3]],["slice",3]],[[["range",3],["i32",15]],["sliceorindex",4]],[[["rangeinclusive",3],["i32",15]],["slice",3]],[[["rangeto",3],["i32",15]],["slice",3]],[[["usize",15],["rangeto",3]],["sliceorindex",4]],[[["arraybase",3]],[["arraybase",3],["viewrepr",3]]],[[["usize",15]],["sliceorindex",4]],[[["rangefull",3]],["slice",3]],[[["arraybase",3]],[["arraybase",3],["viewrepr",3]]],[[["rangeinclusive",3],["i32",15]],["sliceorindex",4]],[[["isize",15],["range",3]],["slice",3]],[[["isize",15],["rangeto",3]],["slice",3]],[[["rangefull",3]],["sliceorindex",4]],[[],["shape",3]],[[["isize",15],["range",3]],["sliceorindex",4]],[[["usize",15],["rangeto",3]],["slice",3]],[[["rangetoinclusive",3],["i32",15]],["slice",3]],[[],["ixdynimpl",3]],[[],[["arraybase",3],["dim",3],["viewrepr",3]]],[[["rangefrom",3],["i32",15]],["slice",3]],[[["i32",15]],["sliceorindex",4]],[[["usize",15],["rangefrom",3]],["sliceorindex",4]],[[["range",3],["i32",15]],["slice",3]],[[["arraybase",3],["viewrepr",3]],[["arraybase",3],["cowrepr",4]]],[[["usize",15],["vec",3],["global",3]],["ixdynimpl",3]],[[["slice",3]],["sliceorindex",4]],[[["rangeinclusive",3],["isize",15]],["slice",3]],[[["vec",3],["global",3]],[["arraybase",3],["ownedrepr",3],["dim",3]]],[[["isize",15],["rangefrom",3]],["slice",3]],[[["isize",15],["rangefrom",3]],["sliceorindex",4]],[[["vec",3],["global",3]],[["dim",3],["ownedrepr",3],["arraybase",3]]],[[["ownedrepr",3],["arraybase",3]],[["arraybase",3],["cowrepr",4]]],[[],["strideshape",3]],[[["isize",15],["rangetoinclusive",3]],["slice",3]],[[["vec",3],["global",3]],[["dim",3],["arraybase",3]]],[[["rangeinclusive",3],["usize",15]],["sliceorindex",4]],[[["rangeto",3],["i32",15]],["sliceorindex",4]],[[["rangetoinclusive",3],["i32",15]],["sliceorindex",4]],[[["range",3],["usize",15]],["sliceorindex",4]],[[["rangeinclusive",3],["isize",15]],["sliceorindex",4]],[[["rangeinclusive",3],["usize",15]],["slice",3]],[[["isize",15],["rangeto",3]],["sliceorindex",4]],[[["usize",15],["rangetoinclusive",3]],["sliceorindex",4]],[[["range",3],["usize",15]],["slice",3]],[[],[["dim",3],["viewrepr",3],["arraybase",3]]],[[["rangefrom",3],["i32",15]],["sliceorindex",4]],[[["isize",15]],["sliceorindex",4]],[[]],[[]],[[]],[[],["isize",15]],[[],["isize",15]],[[]],[[]],[[["ownedrepr",3],["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3],["viewrepr",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3],["cowrepr",4]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3],["viewrepr",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3],["ownedarcrepr",3]],[["arraybase",3],["ownedrepr",3]]],[[]],[[["arraybase",3]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["option",4]],[[],[["option",4],["usize",15]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["option",4]],[[],[["option",4],["usize",15]]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],["shape",3]],[[],["shape",3]],[[["bool",15]],["shape",3]],[[],["strideshape",3]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["vec",3],["global",3]],["ownedarcrepr",3]],[[],["ownedarcrepr",3]],[[["vec",3],["global",3]],["ownedrepr",3]],[[],["ownedarcrepr",3]],[[],["dim",3]],[[],["bool",15]],[[],["dim",3]],[[],["bool",15]],[[],["dim",3]],[[],["bool",15]],[[],["dim",3]],[[],["bool",15]],[[],["dim",3]],[[],["bool",15]],[[],["dim",3]],[[],["bool",15]],[[],["dim",3]],[[],["bool",15]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],[["dim",3],["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["dim",3],["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["dim",3],["arraybase",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["usize",15]],["dim",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["dim",3]],["dim",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[]],[[["arraybase",3]]],[[]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["dim",3]]],[[["arraybase",3]]],[[]],[[["dim",3]]],[[["usize",15]]],[[["shapeerror",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[],["bool",15]],[[["sliceorindex",4]],["bool",15]],[[["sliceorindex",4]],["bool",15]],[[["dim",3]],["bool",15]],[[["dim",3]],["bool",15]],[[["axis",3]],["bool",15]],[[["axis",3]],["bool",15]],[[["arraybase",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["slice",3]],["bool",15]],[[["slice",3]],["bool",15]],[[["axis",3]]],[[["axis",3]],[["dim",3],["ixdynimpl",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]],["dim",3]],[[["axis",3]],["dim",3]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3],["ownedrepr",3]],["nonnull",3]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["arraybase",3]]],[[],["ixdynimpl",3]],[[],["dim",3]],[[],["arraybase",3]],[[["dim",3]]],[[]],[[["dim",3]]],[[["arraybase",3]]],[[["usize",15]]],[[],["arraybase",3]],[[],["ixdynimpl",3]],[[],["lanes",3]],[[],["windows",3]],[[],["zip",3]],[[],["exactchunks",3]],[[],["dim",3]],[[],["axisiter",3]],[[],["ownedarcrepr",3]],[[],["indicesiter",3]],[[],["indexediter",3]],[[],["rawviewrepr",3]],[[],["iter",3]],[[],["shapeerror",3]],[[],["axes",3]],[[],["viewrepr",3]],[[],["strideshape",3]],[[],["lanesiter",3]],[[],["exactchunksiter",3]],[[],["shape",3]],[[],["axischunksiter",3]],[[],["foldwhile",4]],[[],["sliceinfo",3]],[[],["indices",3]],[[],["slice",3]],[[],["sliceorindex",4]],[[],["errorkind",4]],[[],["axisdescription",3]],[[],["axis",3]],[[],["ownedrepr",3]],[[["ownedrepr",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["axis",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[["robj",4]],[["str",15],["result",4]]],[[],["sexptype",6]],[[],["i32",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[]],[[["box",3],["error",8]],["error",4]],[[["str",15]],["error",4]],[[["string",3]],["error",4]],[[["i32",15]]],[[["bool",15]]],[[["arg",3]]],[[["func",3]]],[[["impl",3]]],[[["metadata",3]]],[[]],[[["result",6]]],[[["robj",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[["range",3]]],[[["rangeinclusive",3]]],[[["real",6]]],[[["int",6]]],[[["logical",6]]],[[["robj",4],["hashmap",3],["str",15]]],[[["vec",3],["robj",4]]],[[["listiter",3]]],[[["rarray",3]]],[[["nullable",4]]],[[["pairlistiter",3]]],[[]],[[["str",15]]],[[["pairlist",3]]],[[["function",3]]],[[["raw",3]]],[[["character",3]]],[[["environment",3]]],[[["list",3]]],[[["expression",3]]],[[["language",3]]],[[["symbol",3]]],[[["primitive",3]]],[[["promise",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["striter",3]],[[]],[[]],[[],["character",3]],[[],["environment",3]],[[],["enviter",3]],[[],["expression",3]],[[],["function",3]],[[],["language",3]],[[],["list",3]],[[],["listiter",3]],[[],["nullable",4]],[[],["pairlist",3]],[[],["pairlistiter",3]],[[],["primitive",3]],[[],["promise",3]],[[],["raw",3]],[[],["symbol",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["bool",3]],["bool",15]],[[["bool",3]],["bool",15]],[[["arg",3]],["bool",15]],[[["arg",3]],["bool",15]],[[["func",3]],["bool",15]],[[["func",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadata",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["robj",4]],["bool",15]],[[["character",3]],["bool",15]],[[["character",3]],["bool",15]],[[["environment",3]],["bool",15]],[[["environment",3]],["bool",15]],[[["expression",3]],["bool",15]],[[["expression",3]],["bool",15]],[[["function",3]],["bool",15]],[[["function",3]],["bool",15]],[[["language",3]],["bool",15]],[[["language",3]],["bool",15]],[[["list",3]],["bool",15]],[[["list",3]],["bool",15]],[[["rarray",3]],["bool",15]],[[["rarray",3]],["bool",15]],[[["nullable",4]],["bool",15]],[[["nullable",4]],["bool",15]],[[["pairlist",3]],["bool",15]],[[["pairlist",3]],["bool",15]],[[["primitive",3]],["bool",15]],[[["primitive",3]],["bool",15]],[[["promise",3]],["bool",15]],[[["promise",3]],["bool",15]],[[["raw",3]],["bool",15]],[[["raw",3]],["bool",15]],[[["symbol",3]],["bool",15]],[[["symbol",3]],["bool",15]],[[["rtype",4]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[["robj",4]],["result",6]],[[],[["option",4],["error",8]]],[[],[["striter",3],["option",4]]],[[["vec",3],["global",3]],[["dim",3],["arraybase",3]]],[[["usize",15]],[["dim",3],["arraybase",3]]],[[],[["dim",3],["arraybase",3]]],[[["usize",15]],[["dim",3],["arraybase",3]]],[[["usize",15]],[["option",4],["arraybase",3]]],[[["usize",15]],[["dim",3],["arraybase",3]]],[[["arraybase",3]],[["dim",3],["arraybase",3]]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["arraybase",3]],[[["vec",3],["global",3]],[["result",4],["arraybase",3],["shapeerror",3]]],[[["vec",3],["global",3]],["arraybase",3]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["usize",15]],[[["axis",3]],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["axis",3]],["isize",15]],[[],[["viewrepr",3],["arraybase",3]]],[[],[["arraybase",3],["viewrepr",3]]],[[],[["ownedrepr",3],["arraybase",3]]],[[],[["arraybase",3],["ownedarcrepr",3]]],[[],[["ownedrepr",3],["arraybase",3]]],[[],[["arraybase",3],["ownedarcrepr",3]]],[[],["option",4]],[[],["option",4]],[[],["iter",3]],[[],["itermut",3]],[[],["indexediter",3]],[[],["indexeditermut",3]],[[["sliceinfo",3]],[["arraybase",3],["viewrepr",3]]],[[["sliceinfo",3]],[["arraybase",3],["viewrepr",3]]],[[]],[[["sliceinfo",3]],["arraybase",3]],[[]],[[]],[[["axis",3],["slice",3]],[["viewrepr",3],["arraybase",3]]],[[["axis",3],["slice",3]],[["arraybase",3],["viewrepr",3]]],[[["axis",3],["slice",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15],["axis",3]],[["arraybase",3],["viewrepr",3]]],[[["usize",15],["axis",3]],[["arraybase",3],["viewrepr",3]]],[[["usize",15],["axis",3]],["arraybase",3]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]],[["arraybase",3],["viewrepr",3]]],[[["usize",15],["axis",3]],[["arraybase",3],["viewrepr",3]]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]],["arraybase",3]],[[["axis",3]],[["ownedrepr",3],["arraybase",3]]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[["axis",3]],["lanes",3]],[[["axis",3]],["lanesmut",3]],[[],["axisiter",3]],[[],["axisitermut",3]],[[["axis",3]],["axisiter",3]],[[["axis",3]],["axisitermut",3]],[[["usize",15],["axis",3]],["axischunksiter",3]],[[["usize",15],["axis",3]],["axischunksitermut",3]],[[],["exactchunks",3]],[[],["exactchunksmut",3]],[[],["windows",3]],[[],[["arraybase",3],["viewrepr",3],["dim",3]]],[[],[["viewrepr",3],["dim",3],["arraybase",3]]],[[],[["dim",3],["arraybase",3]]],[[],["bool",15]],[[],[["cowrepr",4],["arraybase",3]]],[[]],[[]],[[],[["arraybase",3],["rawviewrepr",3]]],[[],[["arraybase",3],["rawviewrepr",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["shapeerror",3],["result",4],["arraybase",3]]],[[],["arraybase",3]],[[],[["dim",3],["arraybase",3]]],[[],[["result",4],["arraybase",3],["shapeerror",3]]],[[],[["arraybase",3],["option",4]]],[[["usize",15]]],[[],["arraybase",3]],[[],["arraybase",3]],[[],[["viewrepr",3],["arraybase",3]]],[[],["axes",3]],[[],["axis",3]],[[["axis",3]]],[[["axis",3]],["bool",15]],[[["axis",3]],["arraybase",3]],[[["axis",3]],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[],[["arraybase",3],["ownedrepr",3]]],[[],[["arraybase",3],["ownedrepr",3]]],[[],[["arraybase",3],["ownedrepr",3]]],[[],["arraybase",3]],[[]],[[]],[[]],[[["axis",3]],[["arraybase",3],["ownedrepr",3]]],[[["axis",3]],[["arraybase",3],["ownedrepr",3]]],[[["axis",3]],[["arraybase",3],["ownedrepr",3]]],[[["axis",3]]],[[]],[[],[["vec",3],["global",3]]],[[],["arraybase",3]],[[],[["vec",3],["global",3]]],[[["usize",15]],[["arraybase",3],["viewrepr",3],["dim",3]]],[[["usize",15]],[["viewrepr",3],["dim",3],["arraybase",3]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],[["arraybase",3],["viewrepr",3],["dim",3]]],[[["usize",15]],[["viewrepr",3],["dim",3],["arraybase",3]]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[["axis",3]]],[[["usize",15],["axis",3]]],[[]],[[],["option",4]],[[]],[[]],[[["axis",3]],[["ownedrepr",3],["arraybase",3]]],[[["axis",3]],[["option",4],["arraybase",3]]],[[["axis",3]],[["ownedrepr",3],["arraybase",3]]],[[["axis",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],["bool",15]],[[]],[[]],[[["arraybase",3]]],[[],[["result",4],["arraybase",3],["shapeerror",3]]],[[],[["arraybase",3],["viewrepr",3]]],[[],[["shapeerror",3],["arraybase",3],["result",4]]],[[],[["arraybase",3],["viewrepr",3]]],[[],[["viewrepr",3],["arraybase",3]]],[[],[["arraybase",3],["viewrepr",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]]],[[]],[[],[["arraybase",3],["rawviewrepr",3]]],[[],[["arraybase",3],["viewrepr",3]]],[[["usize",15],["axis",3]]],[[],[["rawviewrepr",3],["arraybase",3]]],[[],[["arraybase",3],["rawviewrepr",3]]],[[],[["arraybase",3],["viewrepr",3]]],[[],[["arraybase",3],["viewrepr",3]]],[[["usize",15],["axis",3]]],[[],[["rawviewrepr",3],["arraybase",3]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]],[["dim",3],["ixdynimpl",3]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["axis",3]],[[],["usize",15]],[[],["isize",15]],[[],["errorkind",4]],[[["errorkind",4]],["shapeerror",3]],[[["option",4],["isize",15]],["slice",3]],[[["isize",15]],["slice",3]],[[],[["shapeerror",3],["sliceinfo",3],["result",4]]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[["isize",15]],["sliceorindex",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["usize",15]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],[["ownedrepr",3],["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],[["ownedrepr",3],["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],[["ownedrepr",3],["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],[["ownedrepr",3],["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],[["ownedrepr",3],["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[]],[[],["sexptype",6]],[[],["f64",15]],[[],["i32",15]],[[],["i32",15]],[[],["u8",15]],[[],["sexp",6]],[[],[["robj",4],["result",6]]],[[],[["robj",4],["result",6]]],[[],[["robj",4],["result",6]]],[[],[["robj",4],["result",6]]],[[],[["robj",4],["result",6]]],[[["pairlist",3]],[["robj",4],["result",6]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["robj",4]],[[],["robj",4]],[[],["robj",4]],[[["u32",15]],["robj",4]],[[],["robj",4]],[[],["robj",4]],[[],["robj",4]],[[["sexptype",6],["i32",15]],["robj",4]],[[]],[[["symbol",3],["tryinto",8]],[["robj",4],["result",6]]],[[["symbol",3],["tryinto",8]],[["robj",4],["result",6]]],[[],[["robj",4],["result",6]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],[["robj",4],["result",6]]],[[["u32",15],["usize",15]],["robj",4]],[[["robj",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["robj",4]],[[],["bool",15]],[[],["robj",4]]],"p":[[4,"Error"],[3,"SliceIter"],[3,"StrIter"],[3,"Bool"],[3,"Arg"],[3,"Func"],[3,"Impl"],[3,"Metadata"],[8,"FromRobj"],[8,"IntoRobj"],[8,"RobjItertools"],[3,"Axis"],[8,"Dimension"],[8,"ShapeBuilder"],[4,"CowRepr"],[8,"Dot"],[3,"AxisDescription"],[8,"IntoDimension"],[8,"RemoveAxis"],[4,"ErrorKind"],[3,"Slice"],[4,"SliceOrIndex"],[13,"Slice"],[8,"IndexLonger"],[8,"AssignElem"],[8,"RawData"],[8,"RawDataSubst"],[4,"FoldWhile"],[8,"IntoNdProducer"],[8,"NdProducer"],[8,"FixedInitializer"],[8,"TryFrom"],[8,"TryInto"],[8,"Index"],[8,"ToVectorValue"],[4,"Robj"],[8,"AsTypedSlice"],[3,"Character"],[3,"Environment"],[3,"Expression"],[3,"Function"],[3,"Language"],[3,"List"],[3,"ListIter"],[3,"FromList"],[3,"RArray"],[6,"RColumn"],[6,"RMatrix"],[6,"RMatrix3D"],[4,"Nullable"],[3,"Pairlist"],[3,"PairlistIter"],[3,"Primitive"],[3,"Promise"],[3,"Raw"],[3,"Symbol"],[8,"SymPair"],[8,"Deref"],[8,"IsNA"],[4,"RType"],[3,"ArrayBase"],[3,"Dim"],[3,"OwnedRcRepr"],[3,"RawViewRepr"],[3,"ViewRepr"],[3,"Shape"],[3,"StrideShape"],[3,"IxDynImpl"],[3,"ShapeError"],[3,"SliceInfo"],[3,"Axes"],[3,"Indices"],[3,"IndicesIter"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksIterMut"],[3,"ExactChunksMut"],[3,"IndexedIter"],[3,"IndexedIterMut"],[3,"Iter"],[3,"IterMut"],[3,"Lanes"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"LanesMut"],[3,"Windows"],[3,"Zip"],[3,"OwnedRepr"],[3,"EnvIter"],[6,"Int"],[6,"Real"],[6,"Logical"],[6,"ArrayView1"],[6,"ArrayView2"]],"a":{"&*":[646],"*":[646],"[":[420],"[]":[420],"]":[420]}},\
"extendr_engine":{"doc":"A sigleton instance of the R interpreter.","t":[5,5],"n":["start_r","end_r"],"q":["extendr_engine",""],"d":["","Close down the R interpreter. Note you won’t be able to …"],"i":[0,0],"f":[[[]],[[]]],"p":[]},\
"extendr_macros":{"doc":"Macros for generating wrappers for rust functions.","t":[23,14,14,14,14],"n":["extendr","extendr_module","pairlist","R","Rraw"],"q":["extendr_macros","","","",""],"d":["","Define a module and export symbols to R Example:","Create a Pairlist R object from a list of name-value …","Execute R code by parsing and evaluating tokens.","Execute R code by parsing and evaluating tokens but …"],"i":[0,0,0,0,0],"f":[null,null,null,null,null],"p":[]}\
}');
initSearch(searchIndex);