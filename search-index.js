var searchIndex = JSON.parse('{\
"extendr_api":{"doc":"A safe and user friendly R extension interface.","t":[12,12,13,13,13,13,3,8,8,13,13,16,16,13,13,17,13,13,13,13,13,17,17,17,17,17,13,13,13,14,4,13,13,14,13,13,13,13,13,17,16,8,8,13,13,11,11,11,11,14,14,10,10,11,0,23,14,14,11,11,11,11,11,11,11,11,11,11,11,0,14,0,11,11,0,14,0,14,0,0,0,0,14,0,14,14,14,0,0,0,14,14,5,0,0,5,14,14,0,10,11,11,11,11,11,11,11,11,10,11,11,11,11,14,0,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,13,13,3,13,3,13,13,13,4,13,13,4,4,4,13,13,13,3,13,3,13,13,13,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,0,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,17,17,12,6,6,6,6,6,6,6,6,6,6,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,3,3,18,13,13,6,4,8,8,8,8,3,5,16,16,16,16,16,8,8,8,13,16,16,16,16,4,18,8,4,8,13,13,8,13,8,8,8,8,16,16,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,3,6,16,8,3,16,8,18,8,8,8,3,13,4,16,13,16,16,16,16,16,16,16,13,13,3,3,16,14,13,6,6,8,8,8,8,3,8,8,13,14,8,3,8,8,3,3,13,8,3,4,16,3,16,8,8,13,13,3,3,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,14,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,5,5,5,5,5,11,11,12,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,23,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,10,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,0,11,11,11,11,11,10,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,5,14,12,11,11,12,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,5,5,12,6,6,6,6,6,6,6,6,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,3,6,3,5,16,8,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,16,18,8,3,16,6,6,8,16,16,10,5,5,5,14,11,11,5,5,5,5,14,10,11,10,10,10,14,10,11,11,10,10,8,8,8,3,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,8,8,8,8,8,8,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,5,11,11,5,5,5,5,11,11,11,11,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,5,11,5,11,11,11,5,11,5],"n":["0","1","Any","Builtin","Bytecode","Complex","Cplx","Deref","DerefMut","Dot","Environment","Error","Error","Expression","ExternalPtr","FALSE","Function","Integer","Language","List","Logical","NA_INTEGER","NA_LOGICAL","NA_REAL","NA_STRING","NULL","Null","Pairlist","Promise","R","RType","Raw","Real","Rraw","Rstr","S4","Special","String","Symbol","TRUE","Target","TryFrom","TryInto","Unknown","WeakRef","borrow","borrow","borrow_mut","borrow_mut","call","data_frame","deref","deref_mut","eq","error","extendr","extendr_module","factor","fmt","from","from","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","from_robj","functions","global","graphics","into","into","iter","lang","lang_macros","list","logical","metadata","na","ownership","pairlist","prelude","r","reprint","reprintln","rmacros","robj","robj_ndarray","rprint","rprintln","rtype_to_sxp","scalar","serializer","sxp_to_rtype","sym","test","thread_safety","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","var","wrapper","Error","EvalError","ExpectedAltrep","ExpectedAny","ExpectedBuiltin","ExpectedBytecode","ExpectedComplex","ExpectedDot","ExpectedEnvironment","ExpectedExpression","ExpectedExternalPtr","ExpectedExternalPtrType","ExpectedFunction","ExpectedInteger","ExpectedLanguage","ExpectedList","ExpectedLogical","ExpectedMatrix","ExpectedMatrix3D","ExpectedNonZeroLength","ExpectedNull","ExpectedNumeric","ExpectedPairlist","ExpectedPrimitive","ExpectedPromise","ExpectedRaw","ExpectedReal","ExpectedRstr","ExpectedS4","ExpectedScalar","ExpectedSpecial","ExpectedString","ExpectedSymbol","ExpectedVector","ExpectedWeakRef","ExpectedWholeNumber","MustNotBeNA","NamesLengthMismatch","NamespaceNotFound","NoGraphicsDevices","NotFound","Other","OutOfLimits","OutOfRange","Panic","ParseError","Result","TypeMismatch","borrow","borrow_mut","custom","eq","fmt","fmt","from","from","from","from","into","ne","source","to_string","try_from","try_into","type_id","base_env","base_namespace","blank_scalar_string","blank_string","current_env","empty_env","eval_string","eval_string_with_params","find_namespace","find_namespaced_function","global_env","global_function","global_var","local_var","na_string","namespace_registry","new_env","nil_value","parse","srcref","BevelJoin","Blank","BoldFont","BoldItalicFont","ButtCap","CM","Context","Dashed","Device","Device","DotDash","Dotted","FontFace","Inches","ItalicFont","LineEnd","LineJoin","LineType","LongDash","MitreJoin","Normalized","Pattern","PlainFont","Raster","RoundCap","RoundJoin","Solid","SquareCap","SymbolFont","TextMetric","TwoDash","Unit","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capture","char_metric","circle","clip","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","current","device_number","eq","eq","eq","eq","eq","eq","eq","eq","eq","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font_face","font_family","from","from","from","from","from","from","from","from","from","from","from_device","from_device_coords","from_device_wh","gamma","get_device","into","into","into","into","into","into","into","into","into","into","line","line_end","line_height","line_join","line_mitre","line_type","line_width","math_text","math_text_height","math_text_metric","math_text_width","mode_off","mode_on","ne","ne","ne","ne","new_page","path","point_size","polygon","polyline","raster","rectangle","symbol","text","text_height","text_metric","text_width","to_device_coords","to_device_wh","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Color","borrow","borrow_mut","from","hex","hex3","into","predefined","rgb","rgba","to_i32","try_from","try_into","type_id","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Int","Logical","NamedListIter","Real","SliceIter","StrIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","fmt","from","from","from_robj","from_slice","into","into","into_iter","into_iter","len","len","length","na_iter","new","new","next","next","nth","nth","size_hint","size_hint","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","Bool","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from","from","from_bool","into","is_false","is_na","is_true","na","ne","sexptype","to_bool","to_logical","to_owned","try_from","try_from","try_into","type_id","Arg","Func","Impl","Metadata","arg_type","args","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","doc","doc","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","func_ptr","functions","hidden","impls","into","into","into","into","make_r_wrappers","methods","name","name","name","name","ne","ne","ne","ne","return_type","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CanBeNA","is_na","na","EXTRA_PRESERVATION_SIZE","INITIAL_PRESERVATION_SIZE","0","ArcArray","ArcArray1","ArcArray2","Array","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayBase","ArrayD","ArrayView","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","AsArray","AssignElem","Axis","AxisDescription","C","ColumnMajor","Continue","CowArray","CowRepr","Data","DataMut","DataOwned","DataShared","Dim","Dim","Dim","Dim","Dim","Dim","Dim","DimAdd","DimMax","Dimension","Done","Elem","Elem","Error","Error","ErrorKind","F","FixedInitializer","FoldWhile","FromRobj","IncompatibleLayout","IncompatibleShape","Index","Index","IndexLonger","IntoDimension","IntoNdProducer","IntoRobj","Item","Item","Ix","Ix0","Ix0","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","IxDynImpl","Ixs","Larger","LinalgScalar","MathCell","MaybeUninit","MultiSliceArg","NDIM","NdFloat","NdIndex","NdProducer","NewAxis","NewAxis","Order","OutDim","OutOfBounds","Output","Output","Output","Output","Output","Output","Output","Overflow","Owned","OwnedArcRepr","OwnedRepr","Pattern","R","RangeLimited","RawArrayView","RawArrayViewMut","RawData","RawDataClone","RawDataMut","RawDataSubst","RawViewRepr","RemoveAxis","RobjItertools","RowMajor","Rraw","ScalarOperand","Shape","ShapeArg","ShapeBuilder","ShapeError","Slice","Slice","SliceArg","SliceInfo","SliceInfoElem","Smaller","StrideShape","Strides","TryFrom","TryInto","Unsupported","View","ViewRepr","Zip","__private__","__private__","__private__","__private__","__private__","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_fastest_varying_stride_order","_fastest_varying_stride_order","_fastest_varying_stride_order","_fastest_varying_stride_order","_is_pointer_inbounds","_is_pointer_inbounds","_is_pointer_inbounds","_is_pointer_inbounds","_is_pointer_inbounds","_is_pointer_inbounds","_is_pointer_inbounds","accumulate_axis_inplace","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","and","and","and","and","and","and_broadcast","and_broadcast","and_broadcast","and_broadcast","and_broadcast","append","apply","apply","apply","apply","apply","apply","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_collect","apply_collect","apply_collect","apply_collect","apply_collect","arr0","arr1","arr2","arr3","array","as_array_view","as_array_view_mut","as_init_slice","as_mut_ptr","as_ptr","as_ref","as_slice","as_slice_memory_order","as_slice_memory_order_mut","as_slice_mut","as_standard_layout","assign","assign_elem","assign_to","assume_init","aview0","aview1","aview2","aview_mut1","aview_mut2","axes","axis","axis","axis_chunks_iter","axis_chunks_iter_mut","axis_iter","axis_iter_mut","azip","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","build_uninit","call","cast","cast","cell_view","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from_with_ptr","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","cmp","cmp","collapse_axis","collect_robj","collect_robj","collect_robj","column","column_major","column_mut","columns","columns_mut","concatenate","concatenate","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","default","default","default","default","default","default_strides","default_strides","deref","deref","deref","deref_into_view","deref_into_view","deref_into_view_mut","deref_mut","deref_mut","diag","diag_mut","dim","div","div","div","div_assign","div_assign","dot","dot","dot","dot","dot","dot","drop","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equal","exact_chunks","exact_chunks_mut","extendr","extendr_module","eye","f","f","f","f","fill","first","first_index","first_index","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold_axis","fold_while","fold_while","fold_while","fold_while","fold_while","fold_while","for_each","for_each","for_each","for_each","for_each","for_each","for_each","fortran_strides","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_diag","from_dimension","from_dimension","from_elem","from_iter","from_iter","from_kind","from_robj","from_robj","from_robj","from_shape","from_shape","from_shape_fn","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_simple_fn","from_shape_vec","from_shape_vec_unchecked","from_vec","ge","gencolumns","gencolumns_mut","genrows","genrows_mut","geomspace","get","get","get","get_mut","gt","hash","hash","hash","hash","hash","hash","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_axis","index_axis_inplace","index_axis_move","index_axis_mut","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","indexed","indexed_iter","indexed_iter_mut","indices","indices_of","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis_inplace","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_cell_view","into_diag","into_dimension","into_dimension","into_dimension","into_dimensionality","into_dyn","into_dyn","into_dyn","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_producer","into_producer","into_raw_vec","into_robj","into_scalar","into_scalar","into_scalar","into_shape","into_shape","into_shape","into_shape","into_shape","into_shape_and_order","into_shape_and_order","into_shape_and_order","into_shared","into_shared","into_shared","into_slice","invert_axis","is_column_major","is_done","is_empty","is_index","is_new_axis","is_owned","is_owned","is_row_major","is_slice","is_square","is_standard_layout","is_view","is_view","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","iter","iter","iter_mut","kind","lanes","lanes_mut","last","last_elem","last_mut","le","len","len","len","len","len_of","linalg","linspace","logspace","lt","map","map_assign_into","map_assign_into","map_assign_into","map_assign_into","map_assign_into","map_axis","map_axis_mut","map_collect","map_collect","map_collect","map_collect","map_collect","map_inplace","map_mut","mapv","mapv_inplace","mapv_into","max_stride_axis","max_stride_axis","maybe_uninit","mean","mean_axis","merge_axes","min_stride_axis","min_stride_axis","move_into","move_into_uninit","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","multi_slice_move","multi_slice_move","multi_slice_mut","ncols","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ne","ne","ne","ne","ne","neg","new","new","new","new","new","next_for","next_for","next_for","next_for","not","nrows","ones","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","outer_iter","outer_iter_mut","pairlist","partial_cmp","partial_cmp","permuted_axes","prelude","product","push","push_column","push_row","range","raw_dim","raw_dim","raw_dim","raw_dim","raw_view","raw_view_mut","rcarr1","rcarr2","rcarr3","reborrow","reborrow","rem","rem","rem","rem_assign","rem_assign","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_index","reshape","reversed_axes","row","row_major","row_mut","rows","rows_mut","s","scalar_sum","scaled_add","select","set_f","set_f","set_f","set_f","set_last_elem","shape","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr_assign","shr_assign","size","size","size","size","size","size","size","size_checked","size_checked","size_checked","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice_axis","slice_axis_inplace","slice_axis_mut","slice_collapse","slice_each_axis","slice_each_axis_inplace","slice_each_axis_mut","slice_move","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","split","split","split","split","split","split","split_at","split_at","split_at","split_at","stack","stack","stack_new_axis","stack_new_axis","start","std","std_axis","step","step_by","stride","stride","stride_of","stride_offset","stride_offset","stride_offset","stride_offset_checked","stride_offset_checked","stride_offset_checked","strides","strides","strides","strides","strides","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum_axis","swap","swap","swap_axes","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_shape","to_shared","to_shared","to_slice","to_string","to_string","to_string","to_vec","transpose","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_is_unique","try_is_unique","try_is_unique","try_is_unique","try_is_unique","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uget","uget","uget","uget_mut","uninit","uninitialized","uswap","var","var_axis","view","view_mut","visit","windows","zero","zero","zero","zero","zero","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zip_mut_with","end","start","step","Axes","AxisChunksIter","AxisChunksIterMut","AxisIter","AxisIterMut","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","Indices","IndicesIter","Iter","IterMut","Lanes","LanesIter","LanesIterMut","LanesMut","Windows","all","all","any","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","contiguous_stride","contiguous_stride","contiguous_stride","count","count","find","find","find_map","find_map","fmt","fmt","fmt","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_producer","into_producer","into_producer","into_producer","into_producer","into_producer","into_producer","into_producer","last","last","len","len","len","len","len","len","len","len","length","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth_back","nth_back","position","position","rfold","rfold","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_at","split_at","split_at","split_at","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Dot","Output","dot","general_mat_mul","general_mat_vec_mul","0","ArcArray","Array","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayBase","ArrayD","ArrayView","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","AsArray","Axis","CowArray","Dim","Dim","Dim","Dimension","Ix0","Ix0","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","Larger","NDIM","NdFloat","NewAxis","Pattern","RawArrayView","RawArrayViewMut","ShapeBuilder","Smaller","Strides","__private__","arr0","arr1","arr2","array","as_array_view","as_array_view_mut","aview0","aview1","aview2","aview_mut1","azip","f","into_dyn","into_pattern","into_shape","ndim","s","set_f","size","size_checked","strides","zeros","AsTypedSlice","FromRobj","IntoRobj","Robj","RobjItertools","ToVectorValue","add","alloc_matrix","alloc_vector","as_bool","as_char","as_character_factor","as_character_vector","as_column","as_environment","as_expression","as_function","as_integer","as_integer_iter","as_integer_slice","as_integer_slice_mut","as_integer_vector","as_language","as_list","as_logical","as_logical_iter","as_logical_slice","as_logical_vector","as_matrix","as_matrix3d","as_pairlist","as_promise","as_raw","as_raw_slice","as_raw_slice_mut","as_real","as_real_iter","as_real_slice","as_real_slice_mut","as_real_vector","as_str","as_str_iter","as_str_vector","as_string_vector","as_symbol","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","as_typed_slice_mut","borrow","borrow_mut","call","class","clone","clone_into","coerce_vector","conformable","default","dim","dimnames","div","dollar","double_colon","drop","duplicate","eq","eq","eq","eq","eval","eval_blind","eval_promise","eval_with_env","find_function","find_var","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_robj","from_sexp","get_attrib","get_current_srcref","get_src_filename","index","inherits","into","into_robj","is_altinteger","is_altlogical","is_altraw","is_altreal","is_altrep","is_altstring","is_array","is_char","is_complex","is_empty","is_environment","is_expression","is_external_pointer","is_factor","is_frame","is_function","is_integer","is_language","is_list","is_logical","is_matrix","is_missing_arg","is_na","is_namespace_env","is_null","is_number","is_object","is_package_env","is_pairlist","is_primitive","is_promise","is_raw","is_real","is_s4","is_string","is_symbol","is_ts","is_unbound_value","is_user_binop","is_valid_string","is_valid_string_f","is_vector","is_vector_atomic","is_vector_list","is_vectorizable","len","levels","mul","names","namespace_env_spec","ncols","nrows","package_env_name","pair_to_vector_list","rtype","set_attrib","set_class","set_names","sexptype","sexptype","slice","sub","tilde","to_integer","to_integer","to_logical","to_logical","to_owned","to_raw","to_raw","to_real","to_real","to_sexp","to_sexp","try_from","try_from","try_into","type_id","vector_to_pair_list","xlengthgets","0","0","Rfloat","Rint","add","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","from","inner","inner","into","into","is_infinite","is_na","is_na","is_nan","is_sign_negative","is_sign_positive","is_subnormal","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","na","na","neg","neg","not","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","to_robj","catch_r_error","single_threaded","this_thread_id","throw_r_error","SymPair","altrep","doubles","environment","expr","externalptr","function","integers","lang","list","matrix","nullable","pairlist","primitive","promise","raw","rstr","s4","strings","sym_pair","symbol","AltComplexImpl","AltIntegerImpl","AltLogicalImpl","AltRawImpl","AltRealImpl","AltStringImpl","Altrep","AltrepImpl","borrow","borrow_mut","class","clone","clone_into","coerce","data","dataptr","dataptr_or_null","deref","deref_mut","duplicate","duplicate_ex","elt","elt","elt","elt","elt","elt","eq","extract_subset","fmt","from","from_robj","from_state_and_class","get_region","get_region","get_region","get_region","get_region","inspect","into","is_manifest","is_sorted","is_sorted","is_sorted","is_sorted","length","make_altcomplex_class","make_altinteger_class","make_altinteger_from_iterator","make_altlogical_class","make_altraw_class","make_altreal_class","make_altreal_from_iterator","make_altstring_class","max","max","min","min","ne","no_na","no_na","no_na","no_na","serialized_state","set_data","set_elt","sum","sum","sum","to_owned","tot_min_max_nas","tot_min_max_nas","tot_min_max_nas","try_from","try_from","try_into","type_id","unserialize","unserialize_ex","Doubles","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","elt","eq","fmt","from","from_iter","from_robj","from_values","get_region","into","is_sorted","iter","iter_mut","ne","new","no_na","to_owned","try_from","try_from","try_into","type_id","EnvIter","Environment","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref_mut","envflags","eq","fmt","fmt","from","from","from_pairs","from_robj","into","into","into_iter","iter","local","names","ne","new_with_capacity","new_with_parent","next","parent","set_envflags","set_local","set_parent","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Expression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","eq","fmt","from","from_robj","from_values","into","ne","to_owned","try_from","try_from","try_into","type_id","values","ExternalPtr","borrow","borrow_mut","clone","clone_into","deref","eq","external_ptr_protected","external_ptr_tag","fmt","from","from_val","into","ne","to_owned","try_from","try_from","try_into","type_id","Function","body","borrow","borrow_mut","call","clone","clone_into","deref","deref_mut","environment","eq","fmt","formals","from","from_parts","from_robj","into","ne","to_owned","try_from","try_from","try_into","type_id","Integers","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","elt","eq","fmt","from","from_iter","from_robj","from_values","get_region","into","is_sorted","iter","iter_mut","ne","new","no_na","to_owned","try_from","try_from","try_into","type_id","Language","borrow","borrow_mut","clone","clone_into","deref","deref_mut","eq","fmt","from","from_robj","from_values","into","iter","names","ne","to_owned","try_from","try_from","try_into","type_id","values","0","FromList","KeyValue","List","ListIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from_pairs","from_robj","from_robj","from_values","into","into","into","into_iter","into_iter","iter","key","len","length","ne","new","new","next","nth","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","values","RArray","RColumn","RMatrix","RMatrix3D","borrow","borrow_mut","data","deref","dim","eq","fmt","from","from_parts","from_robj","index","index_mut","into","ncols","ncols","ncols","ncols","ne","new_column","new_column","new_matrix","new_matrix","new_matrix3d","new_matrix3d","nrows","nrows","nrows","nrows","nrows","nrows","nsub","nsub","try_from","try_into","type_id","NotNull","Null","Nullable","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_robj","into","ne","to_owned","try_from","try_into","type_id","Pairlist","PairlistIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from_pairs","from_robj","into","into","into_iter","into_iter","iter","names","ne","new","new","next","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","values","Primitive","borrow","borrow_mut","clone","clone_into","deref","deref_mut","eq","fmt","from","from_robj","from_string","into","ne","to_owned","try_from","try_from","try_into","type_id","Promise","borrow","borrow_mut","clone","clone_into","code","deref","deref_mut","environment","eq","eval","fmt","from","from_parts","from_robj","into","ne","seen","to_owned","try_from","try_from","try_into","type_id","value","Raw","as_slice","borrow","borrow_mut","clone","clone_into","deref","deref_mut","eq","fmt","from","from_bytes","from_robj","into","ne","to_owned","try_from","try_from","try_into","type_id","Rstr","as_ref","as_str","borrow","borrow_mut","clone","clone_into","deref","deref_mut","eq","fmt","from","from","from","from_robj","from_string","into","ne","to_owned","try_from","try_from","try_into","type_id","S4","borrow","borrow_mut","clone","clone_into","deref","deref_mut","eq","fmt","from","from_robj","get_slot","has_slot","into","ne","new","set_class","set_slot","to_owned","try_from","try_from","try_into","type_id","Strings","as_slice","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","elt","eq","fmt","from","from","from_iter","from_robj","from_values","into","is_sorted","iter","ne","new","no_na","set_elt","to_owned","try_from","try_from","try_into","type_id","Symbol","as_str","base_symbol","borrow","borrow_mut","brace_symbol","bracket_2_symbol","bracket_symbol","class_symbol","clone","clone_into","deref","deref_mut","device_symbol","dim_symbol","dimnames_symbol","dollar_symbol","dot_defined","dot_method","dot_package_name","dot_target","dots_symbol","double_colon_symbol","eq","fmt","from","from","from_robj","from_string","into","lastvalue_symbol","levels_symbol","missing_arg","mode_symbol","na_rm_symbol","name_symbol","names_symbol","namespace_env_symbol","ne","package_symbol","previous_symbol","quote_symbol","row_names_symbol","seeds_symbol","sort_list_symbol","source_symbol","spec_symbol","to_owned","triple_colon_symbol","try_from","try_from","try_into","tsp_symbol","type_id","unbound_value"],"q":["extendr_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::functions","","","","","","","","","","","","","","","","","","","","extendr_api::graphicsextendr_api::graphics::color","","","","","","","","","","","","","","extendr_api::graphics::color::predefined","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::logical","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::na","","","extendr_api::ownership","","extendr_api::preludeextendr_api::prelude::SliceInfoElem","","","extendr_api::prelude::iterextendr_api::prelude::linalg","","","","","extendr_api::prelude::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::robjextendr_api::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::serializer","extendr_api::thread_safety","","","","extendr_api::wrapper","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::altrep","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::doubles","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::environment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::expr","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::externalptr","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::function","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::integers","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::lang","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::nullable","","","","","","","","","","","","","","","","","extendr_api::wrapper::pairlist","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::primitive","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::promise","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::raw","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::rstr","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::s4","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::strings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extendr_api::wrapper::symbol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>…","","","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","","","FALSE value eg. <code>r!(FALSE)</code>","","","","","","NA value for integers eg. <code>r!(NA_INTEGER)</code>","NA value for logical. <code>r!(NA_LOGICAL)</code>","NA value for real values eg. <code>r!(NA_REAL)</code>","NA value for strings. <code>r!(NA_STRING)</code>","NULL value eg. <code>r!(NULL)</code>","","","","Execute R code by parsing and evaluating tokens.","Type of R objects used by Robj::rtype.","","","Execute R code by parsing and evaluating tokens but …","","","","","","TRUE value eg. <code>r!(TRUE)</code>","The resulting type after dereferencing.","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","","","","","","","Call a function or primitive defined by a text expression …","Create a dataframe.","Dereferences the value.","Mutably dereferences the value.","","Error handling in Rust called from R.","","Define a module and export symbols to R Example:","Create a factor.","","","","","","","","Convert an R object to a <code>ndarray</code> ArrayView1.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","Convert an R object to a <code>ndarray</code> ArrayView2.","","Get a global variable.","","","","","A macro for constructing R langage objects.","Argument parsing and checking.","Create a list.","","Module metadata","","Maintain ownership of R objects.","Create a Pairlist R object from a list of name-value …","Common exports for extendr-api.","Convert a rust expression to an R object.","Print via the R error stream.","Print with a newline via the R output stream.","rmacros - a set of macros to call actual R functions in a …","R object handling.","","Print via the R output stream.","Print with a newline via the R output stream.","Convert extendr’s RType to R’s SEXPTYPE. Panics if …","","See https://serde.rs/impl-serializer.html","Convert R’s SEXPTYPE to extendr’s RType.","The sym! macro install symbols. You should cache your …","Macro for running tests.","Provide limited protection for multithreaded access to …","Performs the conversion.","Convert an INTSXP object into an iterator of i32 …","Convert a REALSXP object into an iterator of f64 (double …","Convert a LGLSXP object into an iterator of Bool …","","","","","","Performs the conversion.","","","","","Get a local variable from the calling function or a …","Wrappers are lightweight proxies for references to R …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The base environment; formerly R_NilValue","The namespace for base.","“” as a STRSXP","“” as a CHARSXP","The current interpreter environment.","An empty environment at the root of the environment tree","Parse a string into an R executable object and run it. …","Parse a string into an R executable object and run it …","Find a namespace by name.","Find a function or primitive that may be in a namespace.","The “global” environment","Get a global function from global_env() and ancestors.","Get a global variable from global_env() and ancestors. If …","Get a local variable from current_env() and ancestors.","NA_STRING as a CHARSXP","For registered namespaces.","Create a new environment","The nil object","Parse a string into an R executable object","Current srcref, for debuggers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Screen capture. Returns an integer matrix representing …","Get the metrics for a single unicode codepoint.","Draw a stroked/filled circle. gc.color() is the stroke …","Change the clip rectangle.","","","","","","","","","","","","","","","","","","","","Set the line or text color of a primitive.","Get the current device.","Get the device number for this device.","","","","","","","","","","Set the fill color of a primitive.","","","","","","","","","","Set the font face.","","","","","","","","","","","","","Convert device coordinates into a specified unit. This is …","Convert device width/height coordinates into a specified …","Set the gamma of the device. <code>out_color = in_color ** gamma</code>","Get a device by number.","","","","","","","","","","","Draw a stroked line. gc.color() is the stroke color.","Set the line end type.","Set the line height for text.","Set the line join type.","Set the line miter limit - the point where the line …","Set the type of the line.","Set the width of the line in chosen units.","Draw a mathematical expression.","Get the height of a mathematical expression.","Get the metrics for a mathematical expression.","Get the width of a mathematical expression.","Disable device rendering and flush.","Enable device rendering.","","","","","Start a new page. The page color can be set in advance.","Draw a path with multiple segments. gc.color() is the …","","Draw a stroked/filled polygon. gc.color() is the stroke …","Draw a stroked/filled polyline. gc.color() is the stroke …","Draw a bitmap.","Draw a stroked/filled axis-aligned rectangle. gc.color() …","Draw a special symbol centered on pos. See …","Draw a text string starting at pos. TODO: do we need to …","Get the height of a unicode string.","Get the metrics for a unicode string.","Get the width of a unicode string.","Convert a specified unit coordinates into device …","Convert a specified unit width/height coordinates into …","","","","","","","","","","Set the transform as a 3x2 matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a color from a CSS-like hex number. eg. …","Generate a color from a 3 digit CSS-like hex number. eg. …","","","Generate a color from rgb components (0-255).","Generate a color from rgba components (0-255).","Convert to an R color.","","","","https://www.w3.org/TR/2018/REC-css-color-3-20180619/","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterator over primitives in integer objects.","Iterator over primitives in logical objects.","Iterator over name-value pairs in lists.","Iterator over primitives in real objects.","Generalised iterator of numbers and logical. See Int, …","Iterator over strings or string factors.","","","","","","","","","","","","","","","","","","","","","","","Make an empty str iterator.","","","","","","","","","","","","","","","Bool is a wrapper for i32 in the context of an R’s …","","","","","","","","","","Convert this construct a Bool from a rust boolean.","","Test if FALSE","","Test if TRUE","","","","Convert this Bool to a bool. Note NA will be true.","","","","Convert an LGLSXP object into a Bool (tri-state boolean). …","","","Metadata function argument.","Metadata function.","Metadata Impl.","Module metadata.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if this primitive is NA.","","","","","","An array where the data has shared ownership and is copy …","one-dimensional shared ownership array","two-dimensional shared ownership array","An array that owns its data uniquely.","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","An <em>n</em>-dimensional array.","dynamic-dimensional array","A read-only array view.","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","A read-write array view.","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","Argument conversion into an array view","A producer element that can be assigned to once","An axis index.","Description of the axis, its length and its stride.","“C” is an alias for row major ordering","Column major or “F” order","Continue folding with this value","An array with copy-on-write behavior.","CowArray’s representation.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Dimension description.","Create a new dimension value.","","","Dimension type of the producer","Dimension type","","Adds the two dimensions at compile time.","","Array shape and index trait.","Fold is complete and will return this value","The array element type.","","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","Error code for an error related to array shape or layout.","“F” (for Fortran) is an alias for column major …","Fixed-size array used for array initialization","Value controlling the execution of <code>.fold_while</code> on <code>Zip</code>.","Trait used for incomming parameter conversion.","incompatible memory layout","incompatible shape","Used for indexing operations (<code>container[index]</code>) in …","A single index.","Extra indexing methods for array views","Argument conversion a dimension.","Argument conversion into a producer.","","The element produced per iteration.","The element produced per iteration.","Array index type","Create a zero-dimensional index","zero-dimensionial","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Dynamic dimension or index type.","Array index type (signed)","Next larger dimension","Elements that support linear algebra operations.","A transparent wrapper of <code>Cell<T></code> which is identical in …","Corresponding owned data with MaybeUninit elements","Slicing information describing multiple mutable, disjoint …","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Floating-point element types <code>f32</code> and <code>f64</code>.","Tuple or fixed size arrays that can be used to index an …","A producer of an n-dimensional set of elements; for …","Token to represent a new axis in a slice description.","A new axis of length 1.","Array order","Dimensionality of the output array.","out of bounds indexing","The returned type after indexing.","The resulting array storage of the same kind but …","The type of the slices created by <code>.multi_slice_move()</code>.","","The resulting dimension type after broadcasting.","The sum of the two dimensions.","The type of the reference to the element that is …","overflow when computing offset, length, etc.","Owned data.","ArcArray’s representation.","Array’s representation.","Pattern matching friendly form of the dimension value.","Execute R code by parsing and evaluating tokens.","the shape does not fit inside type limits","A read-only array view without a lifetime.","A mutable array view without a lifetime.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Array pointer’s representation.","Array shape with a next smaller dimension.","Extensions to iterators for R objects including …","Row major or “C” order","Execute R code by parsing and evaluating tokens but …","Elements that can be used as direct operands in …","A contiguous array shape of n dimensions.","Array shape argument with optional order parameter","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","An error related to array shape or layout.","A slice (range with step size).","A range with step size. <code>end</code> is an exclusive index. …","A type that can slice an array of dimension <code>D</code>.","Represents all of the necessary information to perform a …","A slice (range with step), an index, or a new axis token.","Next smaller dimension (if applicable)","An array shape of n dimensions in c-order, f-order or …","","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","aliasing array elements","Borrowed data.","Array view’s representation.","Lock step function application across several arrays or …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","","","","","","","","","","","","","","","","","","","Iterates over pairs of consecutive elements along the …","","","","","","","","","","","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Append an array to the array along an axis.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Borrow as a read-only array view.","Borrow as a read-write array view.","","Return a mutable pointer to the first element in the …","Return a pointer to the first element in the array.","","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice, if it is contiguous …","Return a standard-layout array containing the data, …","Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.","Assign the value <code>input</code> to the element that self …","Perform an elementwise assigment of values cloned from …","<strong>Promise</strong> that the array’s elements are all fully …","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create a two-dimensional read-write array view with …","Return an iterator over the length and stride of each …","Return axis","Axis identifier (index)","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> and yields …","Array zip macro: lock step function application across …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Act like a larger size and/or shape array by <em>broadcasting</em> …","Create an array with uninitalized elements, shape <code>shape</code>.","Call a function or primitive defined by a text expression …","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","Return a shared view of the array with elements as if …","","","","","","","","","","","","","","","","","","","","","","<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Selects <code>index</code> along the axis, collapsing the axis into …","Convert a wide range of iterators to Robj.","Convert a wide range of iterators to Robj.","Convert a wide range of iterators to Robj.","Return an array view of column <code>index</code>.","Return Order::ColumnMajor if the input is true, …","Return a mutable array view of column <code>index</code>.","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Concatenate arrays along the given axis.","Concatenate arrays along the given axis.","","","","","Unsafely translate the data representation from one …","","","","","","","","Create an array with default values, shape <code>shape</code>","","","","","","","","","","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a mutable view of the array.","","","Return a view of the diagonal elements of the array.","Return a read-write view over the diagonal elements of …","Return the shape of the array in its “pattern” form, …","","","","","","Compute the dot product of one-dimensional arrays.","Perform matrix multiplication of rectangular arrays <code>self</code> …","","","Perform the matrix multiplication of the row vector <code>self</code> …","Perform dot product or matrix multiplication of arrays …","","end index; negative are counted from the back of the …","","","","","","","","","","","","","","","Return an exact chunks producer (and iterable).","Return an exact chunks producer (and iterable).","","Define a module and export symbols to R Example:","Create an identity matrix of size <code>n</code> (square 2D array).","","","","","Perform an elementwise assigment to <code>self</code> from element <code>x</code>.","Returns a reference to the first element of the array, or …","","","Returns a mutable reference to the first element of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Traverse the array elements and apply a fold, returning …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Fold along an axis.","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Call <code>f</code> for each element in the array.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","","","Converts the <code>Vec</code> of arrays to an owned 3-D array.","Create a one-dimensional array from a vector (no copying …","Create a one-dimensional read-write array view of the …","","Create a one-dimensional read-only array view of the data …","","Create a read-write array view of the array.","Create a one-dimensional array from a boxed slice (no …","Converts the <code>Vec</code> of arrays to an owned 2-D array.","Create a read-only array view of the array.","","","","","","","","Create a <code>Shape</code> from <code>dimension</code>, using the default memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Zip</code> from the input array or other producer <code>p</code>.","","","","","","","","","","","","Create a 2D matrix from its diagonal","","","Create an array with copies of <code>elem</code>, shape <code>shape</code>.","Create a one-dimensional array from an iterator or …","Create a one-dimensional array from an iterable.","Create a new <code>ShapeError</code>","","","","Create a read-only array view borrowing its data from a …","Create a read-write array view borrowing its data from a …","Create an array with values created by the function <code>f</code>.","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create an <code>RawArrayView<A, D></code> from shape information and a …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Create an array with values created by the function <code>f</code>.","Create an array with the given shape from a vector. (No …","Creates an array from a vector and interpret it according …","Create a one-dimensional array from a vector (no copying …","","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","","","Create a one-dimensional array with <code>n</code> geometrically …","Get a reference of a element through the view.","Convert a mutable array view to a mutable reference of a …","Return a reference to the element at <code>index</code>, or return <code>None</code>…","Return a mutable reference to the element at <code>index</code>, or …","","","","","","","","Returns the number of axes in the input array.","","","","","","","","","Returns the number of dimensions of the input array for …","Performs the indexing (<code>container[index]</code>) operation.","Get a reference of a element through the view.","Convert a mutable array view to a mutable reference of a …","","Return the index of the axis.","","","","","","","","","","Returns a view restricted to <code>index</code> along the axis, with …","Collapses the array to <code>index</code> along the axis and removes …","Collapses the array to <code>index</code> along the axis and removes …","Returns a mutable view restricted to <code>index</code> along the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Zip</code> with an index producer and the producer <code>p</code>…","Return an iterator of indexes and references to the …","Return an iterator of indexes and mutable references to …","Create an iterable of the array shape <code>shape</code>.","Return an iterable of the indices of the passed-in array.","Insert new array axis at <code>axis</code> and return the result.","","","","","","","","","Insert new array axis of length 1 at <code>axis</code>, modifying the …","","","","","","","","","","","","","","","","","","","","","","","Return a shared view of the array with elements as if …","Return the diagonal as a one-dimensional array.","","","","Convert an array or array view to another with the same …","Convert the dimensional into a dynamic dimensional …","Convert any array or array view to a dynamic dimensional …","","Return the inner value","Return the inner value","","","","","","Turn the array into a uniquely owned array, cloning the …","","","","","","Convert the dimension into a pattern matching friendly …","","","","","","","","","Convert the value into an <code>NdProducer</code>.","","Return a vector of the elements in the array, in the way …","","Returns the single element in the array without cloning …","Consume the view and return a reference to the single …","Consume the mutable view and return a mutable reference …","","Transform the array into <code>shape</code>; any shape with the same …","","","","","","","Turn the array into a shared ownership (copy on write) …","","","Return the array’s data as a slice, if it is contiguous …","Reverse the stride of <code>axis</code>.","Return true if input is Order::ColumnMajor, false …","Return true if it is <code>Done</code>, false if <code>Continue</code>","Return whether the array has any elements","Returns <code>true</code> if <code>self</code> is an <code>Index</code> value.","Returns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the data is the <code>Owned</code> variant.","Return true if input is Order::RowMajor, false otherwise","Returns <code>true</code> if <code>self</code> is a <code>Slice</code> value.","Return true if the array is square, false otherwise.","Return <code>true</code> if the array data is laid out in contiguous …","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the data is the <code>View</code> variant.","","","","","","","","Producers, iterables and iterators.","Return an iterator of references to the elements of the …","Return an iterator of mutable references to the elements …","Return the <code>ErrorKind</code> of this error.","Return a producer and iterable that traverses over all 1D …","Return a producer and iterable that traverses over all 1D …","Returns a reference to the last element of the array, or …","","Returns a mutable reference to the last element of the …","","","Return the total number of elements in the array.","Return length","Length in count of elements of the current axis","Return the length of <code>axis</code>.","Linear algebra.","Create a one-dimensional array with <code>n</code> evenly spaced …","Create a one-dimensional array with <code>n</code> logarithmically …","","Call <code>f</code> by reference on each element and create a new array…","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Reduce the values along an axis into just one value, …","Reduce the values along an axis into just one value, …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Modify the array in place by calling <code>f</code> by mutable …","Call <code>f</code> on a mutable reference of each element and create …","Call <code>f</code> by <strong>v</strong>alue on each element and create a new array …","Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …","Call <code>f</code> by <strong>v</strong>alue on each element, update the array with …","Return the axis with the greatest stride (by absolute …","","Create an array with uninitalized elements, shape <code>shape</code>.","Returns the arithmetic mean x̅ of all elements in the …","Return mean along <code>axis</code>.","If possible, merge in the axis <code>take</code> to <code>into</code>.","","","Move all elements from self into <code>new_array</code>, which must be …","Move all elements from self into <code>new_array</code>, which must be …","","","","","","","","","","","Split the view into multiple disjoint slices.","Split the view into multiple disjoint slices.","Return multiple disjoint, sliced, mutable views of the …","Return the number of columns (length of <code>Axis(1)</code>) in the …","Returns the number of dimensions (number of axes).","Return the number of dimensions (axes) in the array","","","","","","","","","","","","","","Perform an elementwise negation of <code>self</code> and return the …","","Create a new cell with the given value","Create a new <code>Slice</code> with the given extents.","Returns a new <code>SliceInfo</code> instance.","","","","","","Perform an elementwise unary not of <code>self</code> and return the …","Return the number of rows (length of <code>Axis(0)</code>) in the …","Create an array with ones, shape <code>shape</code>.","Returns the number of axes in the output array.","","","","","","Returns the number of dimensions after calling <code>.slice()</code> …","","","","Return an iterator that traverses over the outermost …","Return an iterator that traverses over the outermost …","Create a Pairlist R object from a list of name-value …","","","Permute the axes.","ndarray prelude.","Return the product of all elements in the array.","Append an array to the array along an axis.","Append a column to an array","Append a row to an array","Create a one-dimensional array with elements from <code>start</code> …","Return the shape of the producer.","Return the shape of the array as it’s stored in the …","Return a reference to the dimension","Return a reference to the dimension","Return a raw view of the array.","Return a raw mutable view of the array.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","","","","","","","Remove array axis <code>axis</code> and return the result.","","","","","","","","Remove the <code>index</code>th elements along <code>axis</code> and shift down …","<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for …","Transpose the array by reversing axes.","Return an array view of row <code>index</code>.","Return Order::RowMajor if the input is true, …","Return a mutable array view of row <code>index</code>.","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Slice argument constructor.","Return the sum of all elements in the array.","Perform the operation <code>self += alpha * rhs</code> efficiently, …","Along <code>axis</code>, select arbitrary subviews corresponding to …","","","","","","Return the shape of the array as a slice.","","","","","","","","","","","Compute the size of the dimension (number of elements)","Return the size of the shape in number of elements","Return the size of the shape in number of elements","Return a the number of element tuples in the Zip","","","","Compute the size while checking for overflow.","","","Return a sliced view of the array.","","","","","","","","","Return a view of the array, sliced along the specified …","Slice the array in place along the specified axis.","Return a mutable view of the array, sliced along the …","Slice the array in place without changing the number of …","Return a view of a slice of the array, with a closure …","Slice the array in place, with a closure specifying the …","Return a mutable view of a slice of the array, with a …","Slice the array, possibly changing the number of …","Return a sliced read-write view of the array.","","","","","","","","","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one mutable …","Split the array view along <code>axis</code> and return one array …","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","start index; negative are counted from the back of the …","Return standard deviation of elements in the array.","Return standard deviation along <code>axis</code>.","step size in elements; the default is 1, for every …","Create a new <code>Slice</code> with the given step size (multiplied …","Return stride","Stride in count of elements of the current axis","Return the stride of <code>axis</code>.","Self is an index, return the stride offset","Self is an index, return the stride offset","Self is an index, return the stride offset","Return stride offset for this dimension and index.","Return stride offset for this dimension and index.","Return stride offset for this dimension and index.","","Return the strides of the array as a slice.","","","","","","","","","","","","","","Return the sum of all elements in the array.","Return sum along <code>axis</code>.","Swap elements at indices <code>index1</code> and <code>index2</code>.","Swap value with another cell","Swap axes <code>ax</code> and <code>bx</code>.","Return a transposed view of the array.","Return an uniquely owned copy of the array.","","","","","","","","","","","","","","","","","","","","","","Transform the array into <code>new_shape</code>; any shape with the …","Return a shared ownership (copy on write) array, cloning …","","Return the array’s data as a slice, if it is contiguous …","","","","Return an vector with the elements of the one-dimensional …","Return the transpose: row major becomes column major and …","","","","","","Performs the conversion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the conversion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference of a element through the view without …","Convert a mutable array view to a mutable reference of a …","Perform <em>unchecked</em> array indexing.","Perform <em>unchecked</em> array indexing.","Create an array with uninitalized elements, shape <code>shape</code>.","Create an array with uninitalized elements, shape <code>shape</code>.","Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.","Return variance of elements in the array.","Return variance along <code>axis</code>.","Return a read-only view of the array","Return a read-write view of the array","Visit each element in the array by calling <code>f</code> by reference …","Return a window producer and iterable.","","","","","","","","Creates a dimension of all zeros with the specified ndim.","Create an array with zeros, shape <code>shape</code>.","","","","","","","Create a new dimension value with <code>n</code> axes, all zeros","","","Traverse two arrays in unspecified order, in lock step, …","end index; negative are counted from the back of the …","start index; negative are counted from the back of the …","step size in elements; the default is 1, for every …","An iterator over the length and stride of each axis of an …","An iterator that traverses over the specified axis and …","An iterator that traverses over the specified axis and …","An iterator that traverses over an axis and and yields …","An iterator that traverses over an axis and and yields …","Exact chunks producer and iterable.","Exact chunks iterator.","Exact chunks iterator.","Exact chunks producer and iterable.","An iterator over the indexes and elements of an array.","An iterator over the indexes and elements of an array …","Indices producer and iterable.","An iterator over the indexes of an array shape.","An iterator over the elements of an array.","An iterator over the elements of an array (mutable).","See <code>.lanes()</code> for more information.","An iterator that traverses over all axes but one, and …","An iterator that traverses over all dimensions but the …","See <code>.lanes_mut()</code> for more information.","Window producer and iterableplits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Matrix Multiplication","The result of the operation.","","General matrix-matrix multiplication.","General matrix-vector multiplication.","","An array where the data has shared ownership and is copy …","An array that owns its data uniquely.","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","An <em>n</em>-dimensional array.","dynamic-dimensional array","A read-only array view.","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","A read-write array view.","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","Argument conversion into an array view","An axis index.","An array with copy-on-write behavior.","Dimension description.","Create a new dimension value.","","Array shape and index trait.","Create a zero-dimensional index","zero-dimensionial","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Next larger dimension","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Floating-point element types <code>f32</code> and <code>f64</code>.","Token to represent a new axis in a slice description.","Pattern matching friendly form of the dimension value.","A read-only array view without a lifetime.","A mutable array view without a lifetime.","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","Next smaller dimension (if applicable)","","This trait is private to implement; this method exists to …","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Borrow as a read-only array view.","Borrow as a read-write array view.","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Array zip macro: lock step function application across …","","Convert the dimensional into a dynamic dimensional …","Convert the dimension into a pattern matching friendly …","","Returns the number of dimensions (number of axes).","Slice argument constructor.","","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","","Creates a dimension of all zeros with the specified ndim.","Generic access to typed slices in an Robj.","Trait used for incomming parameter conversion.","","Wrapper for an R S-expression pointer (SEXP).","Extensions to iterators for R objects including …","<code>ToVectorValue</code> is a trait that allows many different types …","Add two R objects, consuming the left hand side. panics …","Allocate a matrix object.","Allocated an owned object of a certain type.","Get a scalar rust boolean.","Convert a CHARSXP object to a Rstr wrapper.","Convert a factor to a string vector.","Convert to a string vector.","","Convert an environment object (ENVSXP) to a Env wrapper.","Convert an expression object (EXPRSXP) to a Expr wrapper.","Convert a function object (CLOSXP) to a Function wrapper.","Get a scalar integer.","Get an iterator over integer elements of this slice.","Get a read-only reference to the content of an integer …","Get a read-write reference to the content of an integer …","Get a Vec copied from the object.","Convert a language object to a Language wrapper.","Convert a list object (VECSXP) to a List wrapper.","Get a scalar boolean as a tri-boolean Bool value.","Get an iterator over logical elements of this slice.","Get a read-only reference to the content of a logical …","Get a Vec copied from the object using the tri-state Bool.…","","","Convert a pair list object (LISTSXP) to a Pairlist …","Get a wrapper for a promise.","Convert a raw object to a Rstr wrapper.","Get a read-only reference to the content of an integer or …","Get a read-write reference to the content of a raw vector.","Get a scalar real.","Get an iterator over real elements of this slice.","Get a read-only reference to the content of a double …","Get a read-write reference to the content of a double …","Get a Vec copied from the object.","Get a read-only reference to a scalar string type.","Get an iterator over a string vector. Returns None if the …","Get a vector of string references. String references …","Get a vector of owned strings. Owned strings have long …","Convert a symbol object to a Symbol wrapper.","","","","","","","","","","","","","","","","","Do the equivalent of x(a, b, c)","Get the class attribute as a string iterator if one …","","","Convert to vectors of many kinds.","Return true if two arrays have identical dims.","","Get the dim attribute as an integer iterator if one …","Get the dimnames attribute as a list iterator if one …","Divide two R objects, consuming the left hand side. …","Do the equivalent of x$y","Do the equivalent of x :: y","","Do a deep copy of this object. Note that clone() only …","","","","","Evaluate the expression in R and return an error or an R …","Evaluate the expression and return NULL or an R object.","If this object is a promise, evaluate it, otherwise …","Evaluate the expression in R and return an error or an R …","Find a function in an environment ignoring other …","Find a variable in an environment.","","","Make an robj from a wrapper.","","","","","","","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","Make an robj from a wrapper.","You can return a PairlistIter from a function.","Convert a rust object to NULL or another type.","Convert a column, matrix or matrix3d to an Robj.","You can return a ListIter from a function.","","","","Convert a vector of Robj into a list.","Convert a hashmap into a list.","Convert a logical iterator into a vector.","Convert an integer iterator into a vector.","Convert a real iterator into a vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a specific attribute as a borrowed robj if it exists.","Get the source ref.","Get the source filename.","Do the equivalent of <code>x[[y]]</code>","Return true if this class inherits this class.","","","Returns <code>true</code> if this is an integer ALTREP object.","Returns <code>true</code> if this is an logical ALTREP object.","Returns <code>true</code> if this is a raw ALTREP object.","Returns <code>true</code> if this is an real ALTREP object.","Returns <code>true</code> if this is an ALTREP object.","Returns <code>true</code> if this is an integer ALTREP object.","Return true if this is an array.","Return true if this is CHARSXP.","Return true if this is a complex vector.","Returns <code>true</code> if the <code>Robj</code> contains no elements.","Return true if this is an environment.","Return true if this is an expression.","Return true if this is an expression.","Return true if this is factor.","Return true if this is a data frame.","Return true if this is a function or a primitive (CLOSXP, …","Return true if this is an integer vector (INTSXP) but not …","Return true if this is a language object (LANGSXP).","Return true if this is NILSXP or VECSXP.","Return true if this is a boolean (logical) vector","Return true if this is a matrix.","","Is this object is an NA scalar? Works for character, …","","Return true if this is the null object.","Return true if this is INTSXP, LGLSXP or REALSXP but not …","Return true if this is an object (ie. has a class …","","Return true if this is NILSXP or LISTSXP.","Return true if this is a primitive function BUILTINSXP, …","Return true if this is an environment.","Return true if this is RAWSXP.","Return true if this is a real (f64) vector.","Return true if this is a S4 object.","Return true if this is a string.","Return true if this is a symbol.","Return true if this is a time series vector (see tsp).","","Return true if this is a user defined binop.","Return true if this is a valid string.","Return true if this is a valid string.","Return true if this is a vector.","Return true if this is an atomic vector.","Return true if this is a vector list.","Return true if this is can be made into a vector.","Get the extended length of the object.","Get the levels attribute as a string iterator if one …","Multiply two R objects, consuming the left hand side. …","Get the names attribute as a string iterator if one …","","Number of columns of a matrix","Number of rows of a matrix","","Convert a pairlist (LISTSXP) to a vector list (VECSXP).","Get the type of an R object.","Set a specific attribute and return the object.","Set the class attribute from a string iterator, returning …","Set the names attribute from a string iterator.","","","Do the equivalent of <code>x[y]</code>","Subtract two R objects, consuming the left hand side. …","Do the equivalent of x ~ y","","","","","","","","","","","","","","","","Convert a vector list (VECSXP) to a pair list (LISTSXP)","Copy a vector and resize it. See. …","","","Rfloat is a wrapper for f64 in the context of an R’s …","Rint is a wrapper for i32 in the context of an R’s …","Add two Rfloat values or an option of f64.","Add two Rfloat values or an option of f64.","Add two Rint values or an option of i32, overflows to NA.","Add two Rint values or an option of i32, overflows to NA.","Add two Rfloat values or an option of f64, modifying the …","Add two Rfloat values or an option of f64, modifying the …","Add two Rint values or an option of i32, modifying the …","Add two Rint values or an option of i32, modifying the …","","","","","","","","","","","Divide two Rfloat values or an option of f64.","Divide two Rfloat values or an option of f64.","Divide two Rint values or an option of i32, overflows to …","Divide two Rint values or an option of i32, overflows to …","Divide two Rfloat values or an option of f64, modifying …","Divide two Rfloat values or an option of f64, modifying …","Divide two Rint values or an option of i32, modifying the …","Divide two Rint values or an option of i32, modifying the …","NA always fails.","","NA always fails.","","Debug format.","Debug format.","","","","","","","Get underlying value.","Get underlying value.","","","","Return true is the is a NA value.","Return true is the is a NA value.","","","","","Multiply two Rfloat values or an option of f64.","Multiply two Rfloat values or an option of f64.","Multiply two Rint values or an option of i32, overflows …","Multiply two Rint values or an option of i32, overflows …","Multiply two Rfloat values or an option of f64, modifying …","Multiply two Rfloat values or an option of f64, modifying …","Multiply two Rint values or an option of i32, modifying …","Multiply two Rint values or an option of i32, modifying …","Construct a NA.","Construct a NA.","Negate a Rfloat value.","Negate a Rint value, overflows to NA.","Logical not a Rint value, overflows to NA.","Subtract two Rfloat values or an option of f64.","Subtract two Rfloat values or an option of f64.","Subtract two Rint values or an option of i32, overflows …","Subtract two Rint values or an option of i32, overflows …","Subtract two Rfloat values or an option of f64, modifying …","Subtract two Rfloat values or an option of f64, modifying …","Subtract two Rint values or an option of i32, modifying …","Subtract two Rint values or an option of i32, modifying …","Yields NA on overflow if NAs present.","Yields NA on overflow if NAs present.","","","","","","","","","","","Convert a serializable object to a Robj.","Wrap an R function such as Rf_findFunction and convert …","Run a function single threaded. Note: This will fail …","","","","","","","","","","","","","Wrappers for matrices with deferred arithmetic.","","A pairlist is a linked list of values with optional …","","","","","S4 class support.","","","","","","","","","","","Rust trait for implementing ALTREP. Implement one or more …","","","Safely implement ALTREP_CLASS.","","","Coerce this object into some other type, if possible.","Safely implement R_altrep_data1, R_altrep_data2. When …","Get the data pointer for this vector, possibly expanding …","Get the data pointer for this vector, returning NULL if …","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","Duplicate this object. Called by Rf_duplicate. Currently …","Duplicate this object, possibly duplicating attributes. …","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","Get a single element from this vector.","","Implement subsetting (eg. x[10:19]) for this Altrep …","","","","","Get a multiple elements from this vector.","Get a multiple elements from this vector.","Get a multiple elements from this vector.","Get a multiple elements from this vector.","Get a multiple elements from this vector.","Print the text for .Internal(inspect(obj))","","Return true if the ALTREP object has been manifested …","Return TRUE if this vector is sorted, FALSE if not and …","Return TRUE if this vector is sorted, FALSE if not and …","Return TRUE if this vector is sorted, FALSE if not and …","Return TRUE if this vector is sorted, FALSE if not and …","Get the virtual length of the vector. For example for a …","Make a complex ALTREP class that can be used to make …","Make an integer ALTREP class that can be used to make …","","Make a logical ALTREP class that can be used to make …","Make a raw ALTREP class that can be used to make vectors.","Make a real ALTREP class that can be used to make vectors.","","Make a complex ALTREP class that can be used to make …","Return the maximum of the elements in this vector. If …","Return the maximum of the elements in this vector. If …","Return the minimum of the elements in this vector. If …","Return the minimum of the elements in this vector. If …","","Return true if this vector does not contain NAs.","Return true if this vector does not contain NAs.","Return true if this vector does not contain NAs.","Return true if this vector does not contain NAs.","Fetch the state of this object when writing to a file.","Safely (relatively!) implement R_set_altrep_data1, …","Set a single element in this vector.","Return the sum of the elements in this vector. If …","Return the sum of the elements in this vector. If …","Return the sum of the elements in this vector. If …","","","","","Make a wrapper from a robj if it matches.","","","","Simplified constructor that is called when loading an …","Constructor that is called when loading an Altrep object …","An obscure <code>NA</code>-aware wrapper for R’s double vectors. Can …","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","Get a single element from the vector. Note that this is …","","","","A more generalised iterator collector for small vectors. …","","Wrapper for creating ALTREP double (REALSXP) vectors from …","Get a region of elements from the vector.","","Return <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …","Return an iterator for a double object. Forces ALTREP …","Return a writable iterator for a double object. Forces …","","Create a new vector of doubles.","Return <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …","","Make a wrapper from a robj if it matches.","","","","Iterator over the names and values of an environment","","","","","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","Get the environment flags.","","","","","","Make an R environment object.","","","","","Iterate over an environment.","Get a variable from an environment, but not its ancestors.","Get the names in an environment.","","Create a new, empty environment with a reserved size.","Create a new, empty environment.","","Get the enclosing (parent) environment.","Set the environment flags.","Set or define a variable in an environment.","Set the enclosing (parent) environment.","","","","Make a wrapper from a robj if it matches.","","","","","","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","","","Wrapper for creating Expression (EXPRSXP) objects.","","","","","Make a wrapper from a robj if it matches.","","","Return an iterator over the values of this expression …","Wrapper for creating R objects containing any Rust object.","","","","","This allows us to treat the Robj as if it is the type T.","","Get the “protected” field of an external pointer. …","Get the “tag” of an external pointer. This is the …","","","Construct an external pointer object from any type T. In …","","","","","","","","Wrapper for creating functions (CLOSSXP).","Get the body of the function or None if it is a primitive.","","","Do the equivalent of x(a, b, c)","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","Get the environment of the function or None if it is a …","","","Get the formal arguments of the function or None if it is …","","Make a function from parts.","","","","","Make a wrapper from a robj if it matches.","","","","An obscure <code>NA</code>-aware wrapper for R’s integer vectors. …","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","Get a single element from the vector. Note that this is …","","","","A more generalised iterator collector for small vectors. …","","Wrapper for creating ALTREP integer (INTSXP) vectors from …","Get a region of elements from the vector.","","Return <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …","Return an iterator for a integer object. Forces ALTREP …","Return a writable iterator for a integer object. Forces …","","Create a new vector of integers.","Return <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …","","Make a wrapper from a robj if it matches.","","","","Wrapper for creating language objects.","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","","","","","","","","","","Make a wrapper from a robj if it matches.","","","","","You can use the FromList wrapper to coerce a Robj into a …","","","Iterator over the objects in a VECSXP, EXPRSXP or …","","","","","","","","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","","","","","","","","Wrapper for creating list (VECSXP) objects.","","","","Convert a List into an interator, consuming the list.","","Return an iterator over the names and values of this list.","","Length of a list iterator.","","","Create a new, empty list.","","","","","","","You can use the FromList wrapper to coerce a Robj into a …","","Make a wrapper from a robj if it matches.","","","You can pass a ListIter to a function.","","","","","","","","Return an iterator over the values of this list.","Wrapper for creating and using matrices and arrays.","","","","","","Get the underlying data fro this array.","","Get the dimensions for this array.","","","","","","Zero-based indexing in row, column order.","Zero-based mutable indexing in row, column order.","","Get the number of columns.","Get the number of columns.","Get the number of columns.","Get the number of columns.","","Make a new column type.","Make a new column type.","Create a new matrix wrapper. Make a new column type.","Create a new matrix wrapper. Make a new column type.","","","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of rows.","Get the number of submatrices.","Get the number of submatrices.","","","","","","Wrapper for handling potentially NULL values.","","","","","","","","Convert an object that may be null to a rust type.","","","","","","","","Generate paits of names and values.","","","","","","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","","Construct a NULL pairlist (which is a NULL).","","","Convert an iterator of names and values to a pairlist …","","","","Convert a PairList into an interator, consuming the …","","Generate paits of names and values.","","","","Make an empty pairlist iterator.","","","","","Make a wrapper from a robj if it matches.","You can pass a PairlistIter to a function.","","","","","","","Wrapper for creating primitive objects.","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","","","Make a Primitive object from a string.","","","","","Make a wrapper from a robj if it matches.","","","Wrapper for creating promises (PROMSXP).","","","","","Get the code to be executed from the promise.","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","Get the environment for the execution from the promise.","","If this promise has not been evaluated, evaluate it, …","","","Make a Promise from parts.","","","","Get the seen flag (avoids recursion).","","","Make a wrapper from a robj if it matches.","","","Get the value of the promise, once executed.","Wrapper for creating raw (byte) objects.","Get a slice of bytes from the Raw object.","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","","","","","","","","Make a wrapper from a robj if it matches.","","","Wrapper for creating CHARSXP objects. These are used only …","Treat a Rstr as a string slice.","Get the string from a character object. If the string is …","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","Convert a string slice to a Rstr.","Convert a String to a Rstr.","","","Make a character object from a string.","","","","Make a wrapper from a robj if it matches.","","","","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","","","","","Get a named slot from a S4 object.","Check if a named slot exists.","","","Create a S4 object.","Create a S4 class.","Set a named slot in a S4 object.","","Make a wrapper from a robj if it matches.","","","","","This is a relatively expensive operation, so use a …","","","","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","This is a relatively expensive operation, so use a …","","","","convert string-like objects into a Strings object.","Convert an iterator to a Strings object.","","Wrapper for creating string vector (STRSXP) objects.","","Return <code>TRUE</code> if the vector is sorted, <code>FALSE</code> if not, or …","Get an iterator for this string vector.","","Create a new, empty list.","Return <code>TRUE</code> if the vector has no <code>NA</code>s, <code>FALSE</code> if any, or …","Set a single element of this string vector.","","Make a wrapper from a robj if it matches.","","","","Wrapper for creating symbol objects.","Get the string from a symbol object.","“base”","","","“{”","“[[”","“[”","“class”","","","Make a wrapper behave like an Robj.","Make a wrapper behave like a writable Robj.","“.Device”","“dim”","“dimnames”","“$”","“.defined”","“.Method”","“packageName”","“.target”","“…”","“::”","","","Convert a string to a symbol.","","","Make a symbol object from a string.","","“.Last.value”","“levels”","Missing argument marker","“mode”","“na.rm”","“name”","“names”","<em>NAMESPACE</em>_.“","","“package”","“previous”","“quote”","“row.names”","“.Random.seed”","“sort.list”","“source”","“spec”","","“:::”","Make a wrapper from a robj if it matches.","","","“tsp”","","Unbound marker"],"i":[1,1,2,2,2,2,0,0,0,2,2,3,4,2,2,0,2,2,2,2,2,0,0,0,0,0,2,2,2,0,0,2,2,0,2,2,2,2,2,0,5,0,0,2,2,1,2,1,2,0,0,5,6,2,0,0,0,0,2,1,2,7,8,9,10,11,12,12,12,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,8,9,13,14,10,1,2,3,1,2,1,2,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,18,19,20,0,17,0,20,17,17,0,20,18,0,0,0,17,16,20,0,18,0,19,16,17,19,18,0,17,0,21,22,23,24,25,19,16,17,20,18,21,22,23,24,25,19,16,17,20,18,22,22,22,22,22,23,24,25,19,16,17,20,18,22,23,24,25,19,16,17,20,18,0,21,22,22,22,23,24,25,19,16,17,20,18,21,22,23,24,25,19,16,17,20,18,21,21,21,22,23,24,25,19,16,17,20,18,21,22,22,21,22,21,22,23,24,25,19,16,17,20,18,22,21,21,21,21,21,21,22,22,22,22,22,22,22,23,24,25,22,22,21,22,22,22,22,22,22,22,22,22,22,22,22,23,24,25,19,16,17,20,18,21,21,22,23,24,25,19,16,17,20,18,21,22,23,24,25,19,16,17,20,18,21,22,23,24,25,19,16,17,20,18,0,26,26,26,26,26,26,0,26,26,26,26,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,27,28,28,28,27,28,28,27,28,28,27,27,28,27,28,27,28,28,28,27,28,27,28,27,28,27,28,28,27,28,27,28,27,28,29,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,30,31,30,31,32,33,30,31,32,33,31,32,30,31,32,33,30,31,32,33,30,31,32,33,31,33,31,33,30,31,32,33,33,32,30,31,32,33,30,31,32,33,31,30,31,32,33,30,31,32,33,30,31,32,33,0,34,34,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,37,0,0,0,0,0,0,0,0,38,39,40,41,42,0,0,0,37,43,44,3,4,0,36,0,0,0,45,45,0,46,0,0,0,0,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,48,0,47,0,0,0,0,46,0,49,45,50,51,52,40,53,54,55,45,56,0,0,47,0,45,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,46,0,0,0,47,0,38,0,0,45,56,0,0,43,49,52,41,47,56,57,58,59,59,60,60,61,61,61,61,56,57,58,59,59,60,60,62,62,62,62,61,61,62,62,61,61,61,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,47,47,44,62,62,64,62,62,62,62,62,62,65,62,62,0,0,0,0,0,62,66,66,62,62,62,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,56,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,62,56,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,62,62,0,62,62,62,62,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,62,57,57,62,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,56,57,58,59,59,60,68,35,62,74,74,74,62,36,62,62,62,0,0,62,62,62,62,51,56,57,58,59,59,60,60,62,62,68,61,73,61,61,68,64,73,62,62,62,68,73,62,62,62,62,62,62,62,62,62,62,62,62,62,62,57,71,62,62,67,45,68,36,71,46,35,61,61,73,61,61,62,62,0,0,62,38,69,61,73,62,62,61,61,62,62,62,62,62,62,62,57,67,67,45,68,36,69,70,71,72,46,46,64,63,37,66,35,61,73,58,62,63,63,63,63,63,63,62,63,63,63,63,63,63,62,63,63,63,63,63,63,61,62,62,62,62,62,62,62,62,62,62,62,62,56,57,67,45,68,36,69,69,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,72,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,64,64,63,63,37,66,35,61,73,73,73,58,59,60,62,61,61,62,62,62,67,75,75,75,62,62,62,62,62,62,62,62,62,62,62,68,62,62,62,62,62,55,62,62,62,68,62,71,46,35,61,73,49,64,64,64,64,64,64,64,64,64,50,55,62,62,35,61,61,61,61,61,61,61,61,73,62,62,62,62,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,73,61,61,61,61,61,61,61,61,63,62,62,0,0,62,61,61,61,61,61,61,61,61,62,62,56,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,62,62,42,61,73,62,47,62,61,68,37,62,62,62,62,62,62,56,57,58,60,60,47,61,61,61,61,61,61,61,61,40,62,62,76,62,62,62,38,62,69,61,73,39,61,73,62,57,58,62,62,36,37,62,46,46,62,56,36,46,62,62,62,56,61,61,61,61,61,61,61,0,62,62,67,62,62,62,61,62,68,44,62,66,66,62,0,62,62,68,62,63,63,63,63,63,62,62,63,63,63,63,63,62,62,62,62,62,62,61,62,62,62,62,61,61,62,62,62,62,62,61,61,62,62,61,61,61,52,62,62,62,47,62,61,61,61,61,61,61,61,61,71,46,35,61,73,62,57,68,71,64,58,61,61,61,61,62,62,62,49,64,64,64,64,64,64,64,64,64,62,62,0,68,35,62,0,62,62,62,62,62,41,62,69,70,62,62,0,0,0,62,62,62,62,62,62,62,77,62,61,61,61,61,61,61,61,62,62,62,62,36,62,62,62,0,62,62,62,38,69,61,73,61,62,62,62,62,62,62,62,62,62,62,62,47,69,70,63,61,61,61,47,61,61,62,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,61,61,63,63,63,63,63,63,62,62,62,62,0,0,0,0,71,62,62,71,71,66,66,62,61,61,61,61,61,61,38,62,69,61,73,62,62,62,61,61,62,62,61,61,61,62,62,62,68,62,62,62,62,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,62,62,58,62,62,67,46,62,36,56,57,58,59,60,4,62,56,57,67,45,68,36,69,70,71,72,46,64,64,64,64,64,64,64,64,64,64,64,64,63,37,66,35,61,73,58,59,60,3,62,56,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,56,57,58,59,60,61,61,61,61,61,61,61,61,62,56,57,67,45,68,36,69,70,71,72,46,64,63,37,66,35,61,73,58,59,60,55,62,62,62,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,61,47,62,61,61,61,61,61,61,61,61,61,62,78,78,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,80,79,80,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,81,82,85,87,79,89,92,94,95,96,97,98,81,82,85,87,79,89,92,94,95,96,97,98,79,80,91,95,97,79,80,79,80,79,80,95,97,98,79,80,94,98,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,81,83,85,86,87,91,95,97,79,80,79,80,88,89,90,91,96,97,97,82,84,79,80,88,89,90,91,92,93,94,96,97,98,79,80,91,92,93,97,98,79,80,79,80,79,80,79,80,82,84,79,80,88,89,90,91,92,93,94,96,97,98,91,92,93,97,81,82,85,87,79,89,92,94,95,96,97,98,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,81,82,83,84,85,86,87,79,80,88,89,90,91,92,93,94,95,96,97,98,0,99,99,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,0,0,47,0,0,0,47,38,47,0,0,0,0,47,47,0,0,0,0,0,38,47,47,38,47,0,38,47,47,38,47,0,0,0,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,100,100,100,100,100,100,101,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,76,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,102,102,100,100,100,102,102,102,102,100,102,102,102,102,102,102,100,100,100,100,100,100,103,104,0,0,103,103,104,104,103,103,104,104,103,104,103,104,103,104,103,104,103,104,103,103,104,104,103,103,104,104,103,103,104,104,103,104,103,103,103,104,104,104,103,104,103,104,103,103,104,103,103,103,103,103,103,104,104,103,103,104,104,103,104,103,104,104,103,103,104,104,103,103,104,104,103,104,103,104,103,103,104,104,103,104,103,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,0,0,106,106,106,106,106,107,106,107,107,106,106,107,107,108,109,110,111,112,113,106,107,106,106,106,106,108,109,110,111,112,107,106,106,108,109,110,113,107,106,106,106,106,106,106,106,106,108,109,108,109,106,108,109,110,113,107,106,113,108,109,110,106,108,109,110,106,106,106,106,107,107,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,0,115,116,115,116,115,116,115,116,115,115,115,115,115,116,115,116,115,115,115,116,116,115,115,115,115,115,115,116,115,115,115,115,115,116,115,115,116,115,116,115,116,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,0,0,0,0,122,123,124,122,123,124,123,124,123,124,123,124,123,123,123,123,124,122,123,124,123,123,124,123,122,123,124,123,124,123,125,124,124,123,123,124,124,124,124,123,124,122,122,123,123,124,124,122,123,124,122,123,124,125,123,0,0,0,0,126,126,126,126,126,126,126,126,126,126,126,126,126,14,10,126,126,126,13,126,14,126,10,126,13,14,10,126,126,126,10,126,126,126,126,127,127,0,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,128,129,128,129,128,129,128,129,128,129,128,128,128,128,129,128,128,129,128,128,128,129,128,129,128,128,128,128,129,129,128,129,128,128,129,129,128,129,128,129,128,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,0,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,0,136,0,136,136,0,0,0,0,136,136,136,136,0,0,0,0,0,0,0,0,0,0,136,136,136,136,136,136,136,0,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,0,136,0,136,136,136,0,136,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[["rtype",4]],["bool",15]],null,null,null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["rtype",4]],["i32",15]],null,null,[[["i32",15]],["rtype",4]],null,null,null,[[],["result",4]],[[["robj",3]],["result",6]],[[["robj",3]],["result",6]],[[["robj",3]],["result",6]],[[["robj",3]],["result",6]],[[["robj",3]],["result",6]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["display",8]]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["box",3,["error"]],["error",8]],["error",4]],[[]],[[["string",3]],["error",4]],[[["str",15]],["error",4]],[[]],[[["error",4]],["bool",15]],[[],[["option",4,["error"]],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["environment",3]],[[],["environment",3]],[[],["robj",3]],[[],["robj",3]],[[],["environment",3]],[[],["environment",3]],[[["str",15]],[["result",6,["robj"]],["robj",3]]],[[["str",15]],[["result",6,["robj"]],["robj",3]]],[[["into",8,["robj"]],["robj",3]],[["result",6,["environment"]],["environment",3]]],[[["str",15]],[["result",6,["language"]],["language",3]]],[[],["environment",3]],[[["into",8,["robj"]],["robj",3]],[["result",6,["robj"]],["robj",3]]],[[["into",8,["robj"]],["robj",3]],[["result",6,["robj"]],["robj",3]]],[[["into",8,["robj"]],["robj",3]],[["result",6,["robj"]],["robj",3]]],[[],["robj",3]],[[],["environment",3]],[[["i32",15],["environment",3],["bool",15]],["environment",3]],[[],["robj",3]],[[["str",15]],[["result",6,["robj"]],["robj",3]]],[[],["robj",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["robj",3]],[[["context",3],["char",15]],["textmetric",3]],[[["context",3],["f64",15]]],[[["context",3]]],[[],["device",3]],[[],["pattern",3]],[[],["textmetric",3]],[[],["raster",3]],[[],["lineend",4]],[[],["linejoin",4]],[[],["linetype",4]],[[],["unit",4]],[[],["fontface",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["color",3]]],[[],[["device",3],["result",6,["device"]]]],[[],["i32",15]],[[["device",3]],["bool",15]],[[["pattern",3]],["bool",15]],[[["textmetric",3]],["bool",15]],[[["raster",3]],["bool",15]],[[["lineend",4]],["bool",15]],[[["linejoin",4]],["bool",15]],[[["linetype",4]],["bool",15]],[[["unit",4]],["bool",15]],[[["fontface",4]],["bool",15]],[[["color",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["fontface",4]]],[[["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["device",3],["unit",4]]],[[["unit",4]]],[[["unit",4]]],[[["f64",15]]],[[["i32",15]],[["device",3],["result",6,["device"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["context",3]]],[[["lineend",4]]],[[["f64",15]]],[[["linejoin",4]]],[[["f64",15]]],[[["linetype",4]]],[[["f64",15]]],[[["robj",3],["context",3],["f64",15]]],[[["robj",3],["context",3]],["f64",15]],[[["robj",3],["context",3]],["textmetric",3]],[[["robj",3],["context",3]],["f64",15]],[[],["result",6]],[[],["result",6]],[[["device",3]],["bool",15]],[[["pattern",3]],["bool",15]],[[["textmetric",3]],["bool",15]],[[["raster",3]],["bool",15]],[[["context",3]]],[[["context",3],["intoiterator",8],["bool",15]]],[[["f64",15]]],[[["context",3],["intoiterator",8]]],[[["context",3],["intoiterator",8]]],[[["raster",3],["asref",8],["bool",15],["context",3],["f64",15]]],[[["context",3]]],[[["i32",15],["context",3],["f64",15]]],[[["str",15],["context",3],["asref",8,["str"]],["f64",15]]],[[["context",3],["str",15],["asref",8,["str"]]],["f64",15]],[[["context",3],["str",15],["asref",8,["str"]]],["textmetric",3]],[[["context",3],["str",15],["asref",8,["str"]]],["f64",15]],[[["unit",4]]],[[["unit",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[["u32",15]],["color",3]],[[["u32",15]],["color",3]],[[]],null,[[["u8",15]],["color",3]],[[["u8",15]],["color",3]],[[],["i32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["striter",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["striter",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[["bool",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[]],[[["i32",15]]],[[["bool",15]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",3]],[[["bool",3]],["bool",15]],[[],["sexptype",6]],[[],["bool",15]],[[],["i32",15]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["arg",3]],["bool",15]],[[["func",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["metadata",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["str",15],["bool",15]],[["string",3],["result",6,["string"]]]],null,null,null,null,null,[[["arg",3]],["bool",15]],[[["func",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["metadata",3]],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["bool",15]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["axis",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["usize",15]],["dim",3]],[[["dim",3]],["dim",3]],[[]],[[["arraybase",3]]],[[["usize",15]]],[[["dim",3]]],[[["dim",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[["viewrepr",3],["axis",3],["arraybase",3,["viewrepr"]]],[["shapeerror",3],["result",4,["shapeerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["dim",3],["ownedrepr",3],["arraybase",3,["ownedrepr","dim"]]]],[[],[["dim",3],["ownedrepr",3],["arraybase",3,["ownedrepr","dim"]]]],[[],[["dim",3],["arraybase",3,["ownedrepr","dim"]],["ownedrepr",3]]],[[],[["dim",3],["arraybase",3,["ownedrepr","dim"]],["ownedrepr",3]]],null,[[],[["arraybase",3,["viewrepr","dim"]],["viewrepr",3,["usize"]],["dim",3]]],[[],[["arraybase",3,["viewrepr","dim"]],["dim",3],["viewrepr",3,["usize"]]]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["cowrepr",4],["arraybase",3,["cowrepr"]]]],[[["arraybase",3]]],[[]],[[]],[[],["arraybase",3]],[[],[["viewrepr",3],["dim",3],["arraybase",3,["viewrepr","dim"]]]],[[],[["arraybase",3,["viewrepr","dim"]],["viewrepr",3],["dim",3]]],[[],[["viewrepr",3],["arraybase",3,["viewrepr","dim"]],["dim",3]]],[[],[["arraybase",3,["viewrepr","dim"]],["dim",3],["viewrepr",3]]],[[],[["viewrepr",3],["dim",3],["arraybase",3,["viewrepr","dim"]]]],[[],["axes",3]],[[],["axis",3]],null,[[["usize",15],["axis",3]],["axischunksiter",3]],[[["usize",15],["axis",3]],["axischunksitermut",3]],[[["axis",3]],["axisiter",3]],[[["axis",3]],["axisitermut",3]],null,[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["arraybase"]],["arraybase",3,["viewrepr"]]]],[[],["arraybase",3]],null,[[],[["rawviewrepr",3],["arraybase",3,["rawviewrepr"]]]],[[],[["rawviewrepr",3],["arraybase",3,["rawviewrepr"]]]],[[],[["viewrepr",3,["mathcell"]],["arraybase",3,["viewrepr"]]]],[[],["arraybase",3]],[[],["ownedrepr",3]],[[],["shapeerror",3]],[[],["errorkind",4]],[[],["mathcell",3]],[[],["order",4]],[[],["shape",3]],[[],["strideshape",3]],[[],["slice",3]],[[],["newaxis",3]],[[],["sliceinfoelem",4]],[[],["sliceinfo",3]],[[],["zip",3]],[[],["foldwhile",4]],[[],["axisdescription",3]],[[],["axis",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[],["ownedarcrepr",3]],[[],["rawviewrepr",3]],[[],["viewrepr",3]],[[["arraybase",3]]],[[["ownedrepr",3]]],[[["nonnull",3],["ownedrepr",3]],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["mathcell",3]],["ordering",4]],[[["axis",3]],["ordering",4]],[[["usize",15],["axis",3]]],[[],["robj",3]],[[],["robj",3]],[[],["robj",3]],[[["usize",15]],[["arraybase",3,["viewrepr","dim"]],["viewrepr",3],["dim",3]]],[[["bool",15]],["order",4]],[[["usize",15]],[["arraybase",3,["viewrepr","dim"]],["dim",3],["viewrepr",3]]],[[],["lanes",3]],[[],["lanesmut",3]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["shapeerror",3],["result",4,["arraybase","shapeerror"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["mathcell",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[],["dim",3]],[[],["dim",3]],[[]],[[]],[[]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[]],[[]],[[],[["arraybase",3,["viewrepr","dim"]],["viewrepr",3],["dim",3]]],[[],[["arraybase",3,["viewrepr","dim"]],["dim",3],["viewrepr",3]]],[[]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[]],[[["arraybase",3]],[["dim",3],["arraybase",3,["ownedrepr","dim"]],["ownedrepr",3]]],[[["arraybase",3]],[["dim",3],["ownedrepr",3],["arraybase",3,["ownedrepr","dim"]]]],[[["arraybase",3]],[["dim",3],["ownedrepr",3],["arraybase",3,["ownedrepr","dim"]]]],[[]],[[]],null,[[["arraybase",3]],["bool",15]],[[["arraybase",3]],["bool",15]],[[["shapeerror",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["mathcell",3]],["bool",15]],[[["order",4]],["bool",15]],[[["slice",3]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["axis",3]],["bool",15]],[[],["bool",15]],[[["dim",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[["dim",3]],["bool",15]],[[["dim",3]],["bool",15]],[[],["exactchunks",3]],[[],["exactchunksmut",3]],null,null,[[["usize",15]],[["arraybase",3,["dim"]],["dim",3]]],[[],["shape",3]],[[],["shape",3]],[[],["shape",3]],[[],["shape",3]],[[]],[[],["option",4]],[[],[["dim",3],["option",4,["dim"]]]],[[],[["dim",3],["option",4,["dim"]]]],[[],["option",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dim",3]],[[["ownedrepr",3],["arraybase",3,["ownedrepr"]]],[["arraybase",3,["cowrepr"]],["cowrepr",4]]],[[["vec",3,["global"]],["global",3]],[["dim",3],["arraybase",3,["ownedrepr","dim"]],["ownedrepr",3]]],[[["global",3],["vec",3,["global"]]],[["arraybase",3,["dim"]],["dim",3]]],[[],[["viewrepr",3],["arraybase",3,["viewrepr","dim"]],["dim",3]]],[[["ownedrepr",3],["arraybase",3,["ownedrepr"]]],[["arraybase",3,["ownedarcrepr"]],["ownedarcrepr",3]]],[[],[["dim",3],["arraybase",3,["viewrepr","dim"]],["viewrepr",3]]],[[]],[[["arraybase",3]],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[["global",3],["box",3,["global"]]],[["arraybase",3,["dim"]],["dim",3]]],[[["vec",3,["global"]],["global",3]],[["dim",3],["arraybase",3,["ownedrepr","dim"]],["ownedrepr",3]]],[[["arraybase",3]],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[["arraybase",3,["viewrepr"]],["viewrepr",3]],[["arraybase",3,["cowrepr"]],["cowrepr",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[]],[[],["strideshape",3]],[[]],[[["rangetoinclusive",3,["i32"]],["i32",15]],["slice",3]],[[["usize",15],["rangetoinclusive",3,["usize"]]],["slice",3]],[[["usize",15],["rangefrom",3,["usize"]]],["slice",3]],[[["range",3,["i32"]],["i32",15]],["slice",3]],[[["rangeto",3,["i32"]],["i32",15]],["slice",3]],[[["range",3,["isize"]],["isize",15]],["slice",3]],[[["usize",15],["rangeto",3,["usize"]]],["slice",3]],[[["i32",15],["rangefrom",3,["i32"]]],["slice",3]],[[["rangeinclusive",3,["i32"]],["i32",15]],["slice",3]],[[["rangetoinclusive",3,["isize"]],["isize",15]],["slice",3]],[[["rangeto",3,["isize"]],["isize",15]],["slice",3]],[[["range",3,["usize"]],["usize",15]],["slice",3]],[[["rangeinclusive",3,["isize"]],["isize",15]],["slice",3]],[[["rangefrom",3,["isize"]],["isize",15]],["slice",3]],[[["usize",15],["rangeinclusive",3,["usize"]]],["slice",3]],[[]],[[["rangefull",3]],["slice",3]],[[]],[[["rangeinclusive",3,["i32"]],["i32",15]],["sliceinfoelem",4]],[[["isize",15]],["sliceinfoelem",4]],[[["usize",15]],["sliceinfoelem",4]],[[["rangefrom",3,["isize"]],["isize",15]],["sliceinfoelem",4]],[[]],[[["slice",3]],["sliceinfoelem",4]],[[["usize",15],["rangeto",3,["usize"]]],["sliceinfoelem",4]],[[["rangetoinclusive",3,["i32"]],["i32",15]],["sliceinfoelem",4]],[[["i32",15],["rangefrom",3,["i32"]]],["sliceinfoelem",4]],[[["rangeinclusive",3,["isize"]],["isize",15]],["sliceinfoelem",4]],[[["range",3,["usize"]],["usize",15]],["sliceinfoelem",4]],[[["newaxis",3]],["sliceinfoelem",4]],[[["range",3,["isize"]],["isize",15]],["sliceinfoelem",4]],[[["rangefull",3]],["sliceinfoelem",4]],[[["usize",15],["rangefrom",3,["usize"]]],["sliceinfoelem",4]],[[["rangeto",3,["i32"]],["i32",15]],["sliceinfoelem",4]],[[["usize",15],["rangetoinclusive",3,["usize"]]],["sliceinfoelem",4]],[[["usize",15],["rangeinclusive",3,["usize"]]],["sliceinfoelem",4]],[[["rangeto",3,["isize"]],["isize",15]],["sliceinfoelem",4]],[[["range",3,["i32"]],["i32",15]],["sliceinfoelem",4]],[[["i32",15]],["sliceinfoelem",4]],[[["rangetoinclusive",3,["isize"]],["isize",15]],["sliceinfoelem",4]],[[]],[[["sliceinfo",3]],["sliceinfo",3]],[[],["zip",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ixdynimpl",3]],[[["usize",15],["global",3],["vec",3,["usize","global"]]],["ixdynimpl",3]],[[]],[[]],[[]],[[["arraybase",3]],[["arraybase",3,["dim"]],["dim",3]]],[[],[["dim",3],["option",4,["dim"]]]],[[],[["dim",3,["ixdynimpl"]],["option",4,["dim"]]]],[[],["arraybase",3]],[[],[["arraybase",3,["dim"]],["dim",3]]],[[],[["arraybase",3,["dim"]],["dim",3]]],[[["errorkind",4]],["shapeerror",3]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[],[["result",4,["arraybase","shapeerror"]],["shapeerror",3],["arraybase",3,["viewrepr"]]]],[[],[["arraybase",3,["viewrepr"]],["result",4,["arraybase","shapeerror"]],["shapeerror",3]]],[[],["arraybase",3]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[],[["rawviewrepr",3],["arraybase",3,["rawviewrepr"]]]],[[],[["rawviewrepr",3],["arraybase",3,["rawviewrepr"]]]],[[],["arraybase",3]],[[["global",3],["vec",3,["global"]]],[["arraybase",3],["result",4,["arraybase","shapeerror"]],["shapeerror",3]]],[[["global",3],["vec",3,["global"]]],["arraybase",3]],[[["global",3],["vec",3,["global"]]],[["arraybase",3,["dim"]],["dim",3]]],[[["mathcell",3]],["bool",15]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[["usize",15]],[["arraybase",3,["dim"]],["option",4,["arraybase"]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["mathcell",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15],["axis",3]],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]],["arraybase",3]],[[["usize",15],["axis",3]],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["dim",3]],["isize",15]],[[["dim",3]],["isize",15]],[[["dim",3]],["isize",15]],[[],["isize",15]],[[["dim",3]],["isize",15]],[[["dim",3]],["isize",15]],[[["dim",3]],["isize",15]],[[["dim",3]],["isize",15]],[[],["zip",3]],[[],["indexediter",3]],[[],["indexeditermut",3]],[[],["indices",3]],[[["arraybase",3]],["indices",3]],[[["axis",3]],["arraybase",3]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3,["mathcell"]]]],[[],[["arraybase",3,["dim"]],["dim",3]]],[[]],[[]],[[]],[[],[["arraybase",3],["shapeerror",3],["result",4,["arraybase","shapeerror"]]]],[[],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],[[],[["dim",3,["ixdynimpl"]],["arraybase",3,["dim"]]]],[[],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["ownedrepr",3],["arraybase",3,["ownedrepr"]]]],[[["arraybase",3,["cowrepr"]],["cowrepr",4]],[["ownedrepr",3],["arraybase",3,["ownedrepr"]]]],[[["ownedrepr",3],["arraybase",3,["ownedrepr"]]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[["arraybase",3,["ownedarcrepr"]],["ownedarcrepr",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[["arraybase",3,["viewrepr"]],["viewrepr",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[["arraybase",3,["viewrepr"]],["viewrepr",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["global",3],["vec",3,["global"]]]],[[],["robj",3]],[[]],[[]],[[]],[[],["shape",3]],[[],[["shapeerror",3],["result",4,["arraybase","shapeerror"]],["arraybase",3]]],[[],["shape",3]],[[],["shape",3]],[[],["shape",3]],[[]],[[]],[[]],[[],[["arraybase",3,["ownedarcrepr"]],["ownedarcrepr",3]]],[[],["ownedarcrepr",3]],[[],["ownedarcrepr",3]],[[],["option",4]],[[["axis",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["iter",3]],[[],["itermut",3]],[[],["errorkind",4]],[[["axis",3]],["lanes",3]],[[["axis",3]],["lanesmut",3]],[[],["option",4]],[[],["usize",15]],[[],["option",4]],[[["mathcell",3]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["axis",3]],["usize",15]],null,[[["usize",15]],[["arraybase",3,["dim"]],["dim",3]]],[[["usize",15]],[["arraybase",3,["dim"]],["dim",3]]],[[["mathcell",3]],["bool",15]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[]],[[],["arraybase",3]],[[],["axis",3]],[[["dim",3]],["axis",3]],[[],["arraybase",3]],[[],["option",4]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["option",4,["arraybase"]]]],[[["axis",3]],["bool",15]],[[["dim",3]],["axis",3]],[[["dim",3]],["axis",3]],[[]],[[]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["dim",3]],["dim",3]],[[["usize",15]],["dim",3]],[[["arraybase",3]]],[[]],[[["dim",3]]],[[["usize",15]]],[[["dim",3]]],[[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["slice",3]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["axis",3]],["bool",15]],[[["dim",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[],["arraybase",3]],[[["global",3],["vec",3,["global"]]],["ownedrepr",3]],[[],["mathcell",3]],[[["option",4,["isize"]],["isize",15]],["slice",3]],[[],[["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3],["shapeerror",3]]],[[["global",3],["vec",3,["global"]]],["ownedarcrepr",3]],[[["dim",3]],[["dim",3],["option",4,["dim"]]]],[[["dim",3]],[["option",4,["dim"]],["dim",3]]],[[["dim",3]],[["dim",3],["option",4,["dim"]]]],[[["dim",3]],[["dim",3],["option",4,["dim"]]]],[[],["arraybase",3]],[[],["usize",15]],[[],["arraybase",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["axisiter",3]],[[],["axisitermut",3]],null,[[["mathcell",3]],[["option",4,["ordering"]],["ordering",4]]],[[["axis",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["arraybase",3]],null,[[]],[[["arraybase",3,["viewrepr"]],["axis",3],["viewrepr",3]],[["shapeerror",3],["result",4,["shapeerror"]]]],[[["arraybase",3,["viewrepr","dim"]],["viewrepr",3],["dim",3]],[["shapeerror",3],["result",4,["shapeerror"]]]],[[["arraybase",3,["viewrepr","dim"]],["viewrepr",3],["dim",3]],[["shapeerror",3],["result",4,["shapeerror"]]]],[[],[["arraybase",3,["dim"]],["dim",3]]],[[]],[[]],[[]],[[]],[[],[["rawviewrepr",3],["arraybase",3,["rawviewrepr"]]]],[[],[["rawviewrepr",3],["arraybase",3,["rawviewrepr"]]]],[[],[["ownedarcrepr",3],["arraybase",3,["ownedarcrepr","dim"]],["dim",3]]],[[],[["ownedarcrepr",3],["dim",3],["arraybase",3,["ownedarcrepr","dim"]]]],[[],[["ownedarcrepr",3],["dim",3],["arraybase",3,["ownedarcrepr","dim"]]]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["arraybase",3]]],[[["axis",3]]],[[["axis",3]],["arraybase",3]],[[["axis",3]],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]],["dim",3]],[[["axis",3]],["dim",3]],[[["usize",15],["axis",3]]],[[],["arraybase",3]],[[],["arraybase",3]],[[["usize",15]],[["arraybase",3,["viewrepr","dim"]],["viewrepr",3],["dim",3]]],[[["bool",15]],["order",4]],[[["usize",15]],[["arraybase",3,["viewrepr","dim"]],["dim",3],["viewrepr",3]]],[[],["lanes",3]],[[],["lanesmut",3]],null,[[]],[[["arraybase",3]]],[[["axis",3]],[["ownedrepr",3],["arraybase",3,["ownedrepr"]]]],[[["bool",15]],["shape",3]],[[["bool",15]],["shape",3]],[[["bool",15]],["shape",3]],[[["bool",15]],["shape",3]],[[["usize",15]]],[[]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["axis",3],["slice",3]],[["viewrepr",3],["arraybase",3,["viewrepr"]]]],[[["axis",3],["slice",3]]],[[["axis",3],["slice",3]],[["viewrepr",3],["arraybase",3,["viewrepr"]]]],[[]],[[],[["viewrepr",3],["arraybase",3,["viewrepr"]]]],[[]],[[],[["viewrepr",3],["arraybase",3,["viewrepr"]]]],[[],["arraybase",3]],[[],[["arraybase",3,["viewrepr"]],["viewrepr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]]],[[["axis",3]],[["result",4,["arraybase","shapeerror"]],["arraybase",3,["ownedrepr"]],["shapeerror",3]]],null,[[["axis",3]],[["result",4,["arraybase","shapeerror"]],["arraybase",3,["ownedrepr"]],["shapeerror",3]]],null,null,[[]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],null,[[["isize",15]],["slice",3]],[[],["isize",15]],null,[[["axis",3]],["isize",15]],[[["dim",3]],["isize",15]],[[["dim",3]],["isize",15]],[[["dim",3]],["isize",15]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[["dim",3]],[["option",4,["isize"]],["isize",15]]],[[],["strideshape",3]],[[]],[[],["strideshape",3]],[[],["strideshape",3]],[[],["strideshape",3]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["usize",15]],["dim",3]],[[["dim",3]],["dim",3]],[[]],[[["arraybase",3]]],[[["dim",3]]],[[["dim",3]]],[[["usize",15]]],[[]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[]],[[["mathcell",3]]],[[["usize",15]]],[[],[["viewrepr",3],["arraybase",3,["viewrepr"]]]],[[],[["ownedrepr",3],["arraybase",3,["ownedrepr"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["arraybase",3,["cowrepr"]],["shapeerror",3],["result",4,["arraybase","shapeerror"]]]],[[],[["arraybase",3,["ownedarcrepr"]],["ownedarcrepr",3]]],[[["arraybase",3]],[["ownedarcrepr",3],["arraybase",3,["ownedarcrepr"]]]],[[],["option",4]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["global",3],["vec",3,["global"]]]],[[],["order",4]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3],["shapeerror",3]]],[[],["result",4]],[[],[["sliceinfo",3],["result",4,["sliceinfo","shapeerror"]],["shapeerror",3]]],[[],[["shapeerror",3],["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3]]],[[],[["shapeerror",3],["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3]]],[[],[["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3],["shapeerror",3]]],[[],[["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3],["shapeerror",3]]],[[],[["result",4,["sliceinfo","shapeerror"]],["shapeerror",3],["sliceinfo",3]]],[[],[["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3],["shapeerror",3]]],[[["sliceinfoelem",4],["vec",3,["sliceinfoelem","global"]],["global",3]],[["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3,["vec"]],["shapeerror",3]]],[[],[["result",4,["sliceinfo","shapeerror"]],["sliceinfo",3],["shapeerror",3]]],[[],[["sliceinfo",3],["shapeerror",3],["result",4,["sliceinfo","shapeerror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4,["bool"]],["bool",15]]],[[],[["option",4,["bool"]],["bool",15]]],[[],[["option",4,["bool"]],["bool",15]]],[[],[["option",4,["bool"]],["bool",15]]],[[],[["option",4,["bool"]],["bool",15]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["arraybase",3]],[[],["arraybase",3]],[[]],[[]],[[["axis",3]],[["arraybase",3,["ownedrepr"]],["ownedrepr",3]]],[[],[["viewrepr",3],["arraybase",3,["viewrepr"]]]],[[],[["viewrepr",3],["arraybase",3,["viewrepr"]]]],[[]],[[],["windows",3]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[],["dim",3]],[[["usize",15]]],[[],["arraybase",3]],[[["usize",15]],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["usize",15]],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],[[["usize",15]],["dim",3]],[[["usize",15]],["dim",3]],[[["arraybase",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["exactchunks",3]],[[],["exactchunksiter",3]],[[],["lanes",3]],[[],["windows",3]],[[],["iter",3]],[[],["lanesiter",3]],[[],["axischunksiter",3]],[[],["indicesiter",3]],[[],["indices",3]],[[],["indexediter",3]],[[],["axisiter",3]],[[],["axes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",15]],[[]],[[],["isize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,[[],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[["usize",15]],["dim",3]],null,[[],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],[[],[["dim",3],["ownedrepr",3],["arraybase",3,["ownedrepr","dim"]]]],[[],[["dim",3],["ownedrepr",3],["arraybase",3,["ownedrepr","dim"]]]],[[],[["dim",3],["arraybase",3,["ownedrepr","dim"]],["ownedrepr",3]]],null,[[],[["arraybase",3,["viewrepr","dim"]],["viewrepr",3,["usize"]],["dim",3]]],[[],[["arraybase",3,["viewrepr","dim"]],["dim",3],["viewrepr",3,["usize"]]]],[[],[["viewrepr",3],["dim",3],["arraybase",3,["viewrepr","dim"]]]],[[],[["arraybase",3,["viewrepr","dim"]],["viewrepr",3],["dim",3]]],[[],[["viewrepr",3],["arraybase",3,["viewrepr","dim"]],["dim",3]]],[[],[["arraybase",3,["viewrepr","dim"]],["dim",3],["viewrepr",3]]],null,[[],["shape",3]],[[],[["dim",3,["ixdynimpl"]],["ixdynimpl",3]]],[[]],[[],["shape",3]],[[],["usize",15]],null,[[["bool",15]],["shape",3]],[[],["usize",15]],[[],[["usize",15],["option",4,["usize"]]]],[[],["strideshape",3]],[[["usize",15]]],null,null,null,null,null,null,[[]],[[["i32",15],["sexptype",6]],["robj",3]],[[["usize",15],["u32",15]],["robj",3]],[[],[["bool",15],["option",4,["bool"]]]],[[],[["option",4,["rstr"]],["rstr",3]]],[[],["robj",3]],[[],["robj",3]],[[],[["rcolumn",6],["option",4,["rcolumn"]]]],[[],[["option",4,["environment"]],["environment",3]]],[[],[["option",4,["expression"]],["expression",3]]],[[],[["option",4,["function"]],["function",3]]],[[],[["option",4,["i32"]],["i32",15]]],[[],[["int",6],["option",4,["int"]]]],[[],["option",4]],[[],["option",4]],[[],[["vec",3,["i32"]],["option",4,["vec"]]]],[[],[["option",4,["language"]],["language",3]]],[[],[["option",4,["list"]],["list",3]]],[[],[["option",4,["bool"]],["bool",3]]],[[],[["option",4,["logical"]],["logical",6]]],[[],["option",4]],[[],[["option",4,["vec"]],["vec",3,["bool"]]]],[[],[["option",4,["rmatrix"]],["rmatrix",6]]],[[],[["option",4,["rmatrix3d"]],["rmatrix3d",6]]],[[],[["pairlist",3],["option",4,["pairlist"]]]],[[],[["option",4,["promise"]],["promise",3]]],[[],[["raw",3],["option",4,["raw"]]]],[[],["option",4]],[[],["option",4]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["real",6],["option",4,["real"]]]],[[],["option",4]],[[],["option",4]],[[],[["option",4,["vec"]],["vec",3,["f64"]]]],[[],[["option",4,["str"]],["str",15]]],[[],[["striter",3],["option",4,["striter"]]]],[[],[["vec",3,["str"]],["option",4,["vec"]]]],[[],[["vec",3,["string"]],["option",4,["vec"]]]],[[],[["option",4,["symbol"]],["symbol",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["pairlist",3]],[["result",6,["robj"]],["robj",3]]],[[],[["striter",3],["option",4,["striter"]]]],[[]],[[]],[[["u32",15]],["robj",3]],[[["robj",3]],["bool",15]],[[]],[[],[["int",6],["option",4,["int"]]]],[[],[["option",4,["listiter"]],["listiter",3]]],[[]],[[],[["result",6,["robj"]],["robj",3]]],[[],[["result",6,["robj"]],["robj",3]]],[[]],[[]],[[["robj",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],[["result",6,["robj"]],["robj",3]]],[[],["robj",3]],[[],[["result",6,["robj"]],["robj",3]]],[[["environment",3]],[["result",6,["robj"]],["robj",3]]],[[["tryinto",8,["symbol"]],["symbol",3]],[["result",6,["robj"]],["robj",3]]],[[["tryinto",8,["symbol"]],["symbol",3]],[["result",6,["robj"]],["robj",3]]],[[["formatter",3]],["result",6]],[[]],[[["primitive",3]]],[[]],[[["arg",3]]],[[["func",3]]],[[["impl",3]]],[[["metadata",3]]],[[]],[[["strings",3]]],[[["doubles",3]]],[[["integers",3]]],[[["s4",3]]],[[["altrep",3]]],[[["promise",3]]],[[["vec",3]]],[[["symbol",3]]],[[["language",3]]],[[["expression",3]]],[[["list",3]]],[[["environment",3]]],[[["rstr",3]]],[[["raw",3]]],[[["function",3]]],[[["pairlist",3]]],[[["pairlistiter",3]]],[[["nullable",4]]],[[["rarray",3]]],[[["listiter",3]]],[[["externalptr",3]]],[[["rint",3]]],[[["rfloat",3]]],[[["vec",3,["robj"]],["robj",3]]],[[["str",15],["hashmap",3,["str","robj"]],["robj",3]]],[[["logical",6]]],[[["int",6]]],[[["real",6]]],[[["rangeinclusive",3]]],[[["range",3]]],[[["result",6]]],[[]],[[["robj",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["sexp",6]]],[[],[["option",4,["robj"]],["robj",3]]],[[["i32",15]],["robj",3]],[[],["robj",3]],[[],[["result",6,["robj"]],["robj",3]]],[[["str",15]],["bool",15]],[[]],[[],["robj",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],[["striter",3],["option",4,["striter"]]]],[[]],[[],[["striter",3],["option",4,["striter"]]]],[[],["robj",3]],[[],["usize",15]],[[],["usize",15]],[[],["robj",3]],[[],["robj",3]],[[],["rtype",4]],[[],[["result",6,["robj"]],["robj",3]]],[[],[["result",6,["robj"]],["robj",3]]],[[],[["result",6,["robj"]],["robj",3]]],[[],["sexptype",6]],[[],["sexptype",6]],[[],[["result",6,["robj"]],["robj",3]]],[[]],[[],[["result",6,["robj"]],["robj",3]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["f64",15]],[[],["f64",15]],[[],["sexp",6]],[[],["sexp",6]],[[["arraybase",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["robj",3]],[[["usize",15]],[["result",6,["robj"]],["robj",3]]],null,null,null,null,[[["rfloat",3]]],[[["f64",15]]],[[["i32",15]]],[[["rint",3]]],[[["f64",15]]],[[["rfloat",3]]],[[["rint",3]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rfloat",3]]],[[["f64",15]]],[[["rint",3]]],[[["i32",15]]],[[["f64",15]]],[[["rfloat",3]]],[[["rint",3]]],[[["i32",15]]],[[["f64",15]],["bool",15]],[[["rfloat",3]],["bool",15]],[[["i32",15]],["bool",15]],[[["rint",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["f64",15]]],[[["option",4,["f64"]],["f64",15]]],[[["i32",15]]],[[["option",4,["i32"]],["i32",15]]],[[]],[[],["f64",15]],[[],["i32",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["rfloat",3]]],[[["f64",15]]],[[["rint",3]]],[[["i32",15]]],[[["f64",15]]],[[["rfloat",3]]],[[["i32",15]]],[[["rint",3]]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["rfloat",3]]],[[["rint",3]]],[[["i32",15]]],[[["rfloat",3]]],[[["f64",15]]],[[["rint",3]]],[[["i32",15]]],[[["iterator",8]],["rfloat",3]],[[["iterator",8]],["rint",3]],[[]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",6,["robj"]],["robj",3]]],[[],[["sexp",6],["result",6,["sexp"]]]],[[]],[[],["u32",15]],[[["str",15],["asref",8,["str"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["robj",3]],[[],["altrep",3]],[[]],[[["sexp",6],["rtype",4]],["robj",3]],[[]],[[["sexp",6],["bool",15]]],[[["sexp",6]]],[[]],[[]],[[["sexp",6],["bool",15]],["robj",3]],[[["sexp",6],["bool",15]],["robj",3]],[[["usize",15]],["i32",15]],[[["usize",15]],["f64",15]],[[["usize",15]],["bool",3]],[[["usize",15]],["u8",15]],[[["usize",15]],["cplx",3]],[[["usize",15]],["rstr",3]],[[["altrep",3]],["bool",15]],[[["robj",3]],["robj",3]],[[["formatter",3]],["result",6]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["bool",15],["robj",3]],["altrep",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["i32",15],["bool",15]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",3]],[[],["bool",3]],[[],["bool",3]],[[],["bool",3]],[[],["usize",15]],[[["str",15]],["robj",3]],[[["str",15]],["robj",3]],[[],["altrep",3]],[[["str",15]],["robj",3]],[[["str",15]],["robj",3]],[[["str",15]],["robj",3]],[[],["altrep",3]],[[["str",15]],["robj",3]],[[["bool",15]],["robj",3]],[[["bool",15]],["robj",3]],[[["bool",15]],["robj",3]],[[["bool",15]],["robj",3]],[[["altrep",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["sexp",6]],["robj",3]],[[]],[[["usize",15],["rstr",3]]],[[["bool",15]],["robj",3]],[[["bool",15]],["robj",3]],[[["bool",15]],["robj",3]],[[]],[[]],[[]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["robj",3]],["robj",3]],[[["i32",15],["robj",3]],["robj",3]],null,[[]],[[]],[[],["doubles",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["rfloat",3]],[[["doubles",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["intoiterator",8]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[["usize",15]],["usize",15]],[[]],[[],["bool",3]],[[]],[[]],[[["doubles",3]],["bool",15]],[[["usize",15]],["doubles",3]],[[],["bool",3]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["environment",3]],[[],["enviter",3]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[["environment",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["environment",3]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[]],[[],["enviter",3]],[[["into",8,["robj"]],["robj",3]],[["result",6,["robj"]],["robj",3]]],[[]],[[["environment",3]],["bool",15]],[[["usize",15],["environment",3]]],[[["environment",3]]],[[],["option",4]],[[],[["option",4,["environment"]],["environment",3]]],[[["i32",15]]],[[["into",8,["robj"]],["robj",3]]],[[["environment",3]]],[[]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],["expression",3]],[[]],[[]],[[]],[[["expression",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[["expression",3]],["bool",15]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["typeid",3]],[[],["listiter",3]],null,[[]],[[]],[[],["externalptr",3]],[[]],[[]],[[["externalptr",3]],["bool",15]],[[],["robj",3]],[[],["robj",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["externalptr",3]],["bool",15]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],[["option",4,["robj"]],["robj",3]]],[[]],[[]],[[["pairlist",3]],[["result",6,["robj"]],["robj",3]]],[[],["function",3]],[[]],[[]],[[]],[[],[["option",4,["environment"]],["environment",3]]],[[["function",3]],["bool",15]],[[["formatter",3]],["result",6]],[[],[["pairlist",3],["option",4,["pairlist"]]]],[[]],[[["pairlist",3],["language",3],["environment",3]],["result",6]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[["function",3]],["bool",15]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["integers",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["rint",3]],[[["integers",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["intoiterator",8]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[["usize",15]],["usize",15]],[[]],[[],["bool",3]],[[]],[[]],[[["integers",3]],["bool",15]],[[["usize",15]],["integers",3]],[[],["bool",3]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["language",3]],[[]],[[]],[[]],[[["language",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[],["pairlistiter",3]],[[]],[[["language",3]],["bool",15]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["list",3]],[[],["listiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["list",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["namedlistiter",6]],[[],["string",3]],[[],["usize",15]],[[],["usize",15]],[[["list",3]],["bool",15]],[[],["list",3]],[[]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["robj",3]],[[],["listiter",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["rarray",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["robj",3]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["rarray",3]],["bool",15]],[[["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["clone",8],["fnmut",8]]],[[["usize",15],["clone",8],["fnmut",8]]],[[["usize",15],["clone",8],["fnmut",8]]],[[["usize",15],["clone",8],["fnmut",8]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["nullable",4]],[[]],[[["nullable",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[["nullable",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["pairlist",3]],[[],["pairlistiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pairlist",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[],["pairlistiter",3]],[[]],[[["pairlist",3]],["bool",15]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["primitive",3]],[[]],[[]],[[]],[[["primitive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["str",15]],["result",6]],[[]],[[["primitive",3]],["bool",15]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["promise",3]],[[]],[[],["robj",3]],[[]],[[]],[[],["environment",3]],[[["promise",3]],["bool",15]],[[],[["result",6,["robj"]],["robj",3]]],[[["formatter",3]],["result",6]],[[]],[[["environment",3],["robj",3]],["result",6]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[["promise",3]],["bool",15]],[[],["i32",15]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["typeid",3]],[[],["robj",3]],null,[[]],[[]],[[]],[[],["raw",3]],[[]],[[]],[[]],[[["raw",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[["raw",3]],["bool",15]],[[]],[[],["result",4]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["typeid",3]],null,[[],["str",15]],[[],["str",15]],[[]],[[]],[[],["rstr",3]],[[]],[[]],[[]],[[["rstr",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["str",15]]],[[["string",3]]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["str",15]]],[[]],[[["rstr",3]],["bool",15]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["s4",3]],[[]],[[]],[[]],[[["s4",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[],[["option",4,["robj"]],["robj",3]]],[[],["bool",15]],[[]],[[["s4",3]],["bool",15]],[[["str",15]],[["result",6,["s4"]],["s4",3]]],[[["pairlist",3],["str",15],["robj",3]],[["result",6,["s4"]],["s4",3]]],[[],[["result",6,["s4"]],["s4",3]]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[],["strings",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["str",15]],[[["strings",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["intoiterator",8]]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[],["bool",3]],[[]],[[["strings",3]],["bool",15]],[[["usize",15]],["strings",3]],[[],["bool",3]],[[["usize",15],["str",15],["asref",8,["str"]]]],[[]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["str",15]],[[],["symbol",3]],[[]],[[]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[]],[[]],[[]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[["symbol",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["str",15]]],[[]],[[["robj",3]],[["result",4,["str"]],["str",15]]],[[["str",15],["asref",8,["str"]]]],[[]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[["symbol",3]],["bool",15]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[],["symbol",3]],[[]],[[],["symbol",3]],[[["robj",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["symbol",3]],[[],["typeid",3]],[[],["symbol",3]]],"p":[[3,"Cplx"],[4,"RType"],[8,"TryInto"],[8,"TryFrom"],[8,"Deref"],[8,"DerefMut"],[6,"Int"],[6,"Real"],[6,"Logical"],[6,"RMatrix3D"],[6,"ArrayView1"],[6,"ArrayView2"],[6,"RColumn"],[6,"RMatrix"],[4,"Error"],[4,"LineJoin"],[4,"LineType"],[4,"FontFace"],[4,"LineEnd"],[4,"Unit"],[3,"Context"],[3,"Device"],[3,"Pattern"],[3,"TextMetric"],[3,"Raster"],[3,"Color"],[3,"SliceIter"],[3,"StrIter"],[3,"Bool"],[3,"Arg"],[3,"Func"],[3,"Impl"],[3,"Metadata"],[8,"CanBeNA"],[3,"Axis"],[4,"Order"],[4,"FoldWhile"],[8,"ShapeBuilder"],[8,"ShapeArg"],[8,"IntoNdProducer"],[8,"NdProducer"],[8,"IntoDimension"],[8,"RawData"],[8,"FixedInitializer"],[4,"ErrorKind"],[4,"SliceInfoElem"],[8,"Dimension"],[8,"DataOwned"],[8,"SliceArg"],[8,"Index"],[8,"RawDataSubst"],[8,"MultiSliceArg"],[8,"DimMax"],[8,"DimAdd"],[8,"IndexLonger"],[4,"CowRepr"],[3,"OwnedRepr"],[3,"OwnedArcRepr"],[3,"RawViewRepr"],[3,"ViewRepr"],[3,"Dim"],[3,"ArrayBase"],[3,"Zip"],[3,"SliceInfo"],[8,"AssignElem"],[3,"AxisDescription"],[3,"ShapeError"],[3,"MathCell"],[3,"Shape"],[3,"StrideShape"],[3,"Slice"],[3,"NewAxis"],[3,"IxDynImpl"],[8,"RobjItertools"],[8,"FromRobj"],[8,"IntoRobj"],[8,"RemoveAxis"],[13,"Slice"],[3,"Iter"],[3,"IterMut"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksMut"],[3,"ExactChunksIterMut"],[3,"Lanes"],[3,"LanesMut"],[3,"Windows"],[3,"IndexedIterMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"IndicesIter"],[3,"Indices"],[3,"IndexedIter"],[3,"AxisIter"],[3,"Axes"],[8,"Dot"],[3,"Robj"],[8,"AsTypedSlice"],[8,"ToVectorValue"],[3,"Rfloat"],[3,"Rint"],[8,"SymPair"],[3,"Altrep"],[8,"AltrepImpl"],[8,"AltIntegerImpl"],[8,"AltRealImpl"],[8,"AltLogicalImpl"],[8,"AltRawImpl"],[8,"AltComplexImpl"],[8,"AltStringImpl"],[3,"Doubles"],[3,"Environment"],[3,"EnvIter"],[3,"Expression"],[3,"ExternalPtr"],[3,"Function"],[3,"Integers"],[3,"Language"],[3,"FromList"],[3,"List"],[3,"ListIter"],[8,"KeyValue"],[3,"RArray"],[4,"Nullable"],[3,"Pairlist"],[3,"PairlistIter"],[3,"Primitive"],[3,"Promise"],[3,"Raw"],[3,"Rstr"],[3,"S4"],[3,"Strings"],[3,"Symbol"]],"a":{"&*":[7],"*":[7,8],"[":[755],"[]":[755],"]":[755]}},\
"extendr_engine":{"doc":"A sigleton instance of the R interpreter.","t":[5,5],"n":["end_r","start_r"],"q":["extendr_engine",""],"d":["Close down the R interpreter. Note you won’t be able to …",""],"i":[0,0],"f":[[[]],[[]]],"p":[]},\
"extendr_macros":{"doc":"Macros for generating wrappers for rust functions.","t":[14,14,14,23,14,14],"n":["R","Rraw","call","extendr","extendr_module","pairlist"],"q":["extendr_macros","","","","",""],"d":["Execute R code by parsing and evaluating tokens.","Execute R code by parsing and evaluating tokens but …","Call a function or primitive defined by a text expression …","","Define a module and export symbols to R Example:","Create a Pairlist R object from a list of name-value …"],"i":[0,0,0,0,0,0],"f":[null,null,null,null,null,null],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};