var searchIndex = JSON.parse('{\
"extendr_api":{"doc":"A safe and user friendly R extension interface.","i":[[23,"extendr","extendr_api","Generate bindings for a single function.",null,null],[14,"extendr_module","","Define a module and export symbols to R Example:",null,null],[3,"VecIter","","",null,null],[3,"ListIter","","Iterator over the objects in a vector or string.",null,null],[3,"StrIter","","Iterator over strings or string factors.",null,null],[3,"Symbol","","Wrapper for creating symbols.",null,null],[12,"0","","",0,null],[3,"Character","","Wrapper for creating character objects. These are used…",null,null],[12,"0","","",1,null],[3,"Lang","","Wrapper for creating language objects. Example:",null,null],[12,"0","","",2,null],[3,"List","","Wrapper for creating list objects. Example:",null,null],[12,"0","","",3,null],[3,"Bool","","Bool is a wrapper for i32 in the context of an R\'s…",null,null],[12,"0","","",4,null],[4,"Robj","","Wrapper for an R S-expression pointer (SEXP).",null,null],[5,"find_namespace","","",null,[[],["robj",4]]],[5,"global_env","","The \\\"global\\\" environment",null,[[],["robj",4]]],[5,"empty_env","","An empty environment at the root of the environment tree",null,[[],["robj",4]]],[5,"base_env","","The base environment; formerly R_NilValue",null,[[],["robj",4]]],[5,"base_namespace","","The (fake) namespace for base",null,[[],["robj",4]]],[5,"namespace_registry","","for registered namespaces",null,[[],["robj",4]]],[5,"srcref","","Current srcref, for debuggers",null,[[],["robj",4]]],[5,"nil_value","","The nil object",null,[[],["robj",4]]],[5,"unbound_value","","Unbound marker",null,[[],["robj",4]]],[5,"missing_arg","","Missing argument marker",null,[[],["robj",4]]],[5,"base_symbol","","\\\"base\\\"",null,[[],["robj",4]]],[5,"brace_symbol","","\\\"{\\\"",null,[[],["robj",4]]],[5,"bracket_2_symbol","","\\\"[[\\\"",null,[[],["robj",4]]],[5,"bracket_symbol","","\\\"[\\\"",null,[[],["robj",4]]],[5,"class_symbol","","\\\"class\\\"",null,[[],["robj",4]]],[5,"device_symbol","","\\\".Device\\\"",null,[[],["robj",4]]],[5,"dimnames_symbol","","\\\"dimnames\\\"",null,[[],["robj",4]]],[5,"dim_symbol","","\\\"dim\\\"",null,[[],["robj",4]]],[5,"dollar_symbol","","\\\"$\\\"",null,[[],["robj",4]]],[5,"dots_symbol","","\\\"...\\\"",null,[[],["robj",4]]],[5,"double_colon_symbol","","\\\"::\\\"",null,[[],["robj",4]]],[5,"lastvalue_symbol","","\\\".Last.value\\\"",null,[[],["robj",4]]],[5,"levels_symbol","","\\\"levels\\\"",null,[[],["robj",4]]],[5,"mode_symbol","","\\\"mode\\\"",null,[[],["robj",4]]],[5,"na_rm_symbol","","\\\"na.rm\\\"",null,[[],["robj",4]]],[5,"name_symbol","","\\\"name\\\"",null,[[],["robj",4]]],[5,"names_symbol","","\\\"names\\\"",null,[[],["robj",4]]],[5,"namespace_env_symbol","","NAMESPACE_.\\\"",null,[[],["robj",4]]],[5,"package_symbol","","\\\"package\\\"",null,[[],["robj",4]]],[5,"previous_symbol","","\\\"previous\\\"",null,[[],["robj",4]]],[5,"quote_symbol","","\\\"quote\\\"",null,[[],["robj",4]]],[5,"row_names_symbol","","\\\"row.names\\\"",null,[[],["robj",4]]],[5,"seeds_symbol","","\\\".Random.seed\\\"",null,[[],["robj",4]]],[5,"sort_list_symbol","","\\\"sort.list\\\"",null,[[],["robj",4]]],[5,"source_symbol","","\\\"source\\\"",null,[[],["robj",4]]],[5,"spec_symbol","","\\\"spec\\\"",null,[[],["robj",4]]],[5,"tsp_symbol","","\\\"tsp\\\"",null,[[],["robj",4]]],[5,"triple_colon_symbol","","\\\":::\\\"",null,[[],["robj",4]]],[5,"dot_defined","","\\\".defined\\\"",null,[[],["robj",4]]],[5,"dot_method","","\\\".Method\\\"",null,[[],["robj",4]]],[5,"dot_package_name","","\\\"packageName\\\"",null,[[],["robj",4]]],[5,"dot_target","","\\\".target\\\"",null,[[],["robj",4]]],[5,"na_string","","NA_STRING as a CHARSXP",null,[[],["robj",4]]],[5,"blank_string","","\\\"\\\" as a CHARSXP",null,[[],["robj",4]]],[5,"blank_scalar_string","","\\\"\\\" as a STRSXP",null,[[],["robj",4]]],[5,"single_threaded","","Run a function single threaded. Note: This will fail badly…",null,[[]]],[5,"handle_panic","","This function is used by the wrapper logic to catch panics…",null,[[]]],[11,"to_bool","","Convert this Bool to a bool. Note NA will be true.",4,[[]]],[11,"from_bool","","Convert this construct a Bool from a rust boolean.",4,[[]]],[11,"is_true","","Test if TRUE",4,[[]]],[11,"is_false","","Test if FALSE",4,[[]]],[11,"new","","Make an empty list iterator.",5,[[]]],[11,"new","","Make an empty str iterator.",6,[[]]],[11,"pairlist_iter","","Get an iterator over a pairlist, lang or ... object. Note:…",7,[[],[["listiter",3],["option",4]]]],[11,"list_iter","","Get an iterator over an unnamed list. Note: we plan to…",7,[[],[["option",4],["veciter",3]]]],[11,"str_iter","","Get an iterator over a string vector. Returns None if the…",7,[[],[["option",4],["striter",3]]]],[11,"is_null","","Return true if this is the null object.",7,[[]]],[11,"is_symbol","","Return true if this is a symbol.",7,[[]]],[11,"is_logical","","Return true if this is a boolean (logical) vector",7,[[]]],[11,"is_real","","Return true if this is a real (f64) vector.",7,[[]]],[11,"is_complex","","Return true if this is a complex vector.",7,[[]]],[11,"is_expression","","Return true if this is an expression.",7,[[]]],[11,"is_environment","","Return true if this is an environment.",7,[[]]],[11,"is_string","","Return true if this is a string.",7,[[]]],[11,"is_object","","Return true if this is an object.",7,[[]]],[11,"get_current_srcref","","Get the source ref.",7,[[],["robj",4]]],[11,"get_src_filename","","Get the source filename.",7,[[],["robj",4]]],[11,"as_char","","Convert to a string vector.",7,[[],["robj",4]]],[11,"coerce_vector","","Convert to vectors of many kinds.",7,[[],["robj",4]]],[11,"pair_to_vector_list","","Convert a pairlist (LISTSXP) to a vector list (VECSXP).",7,[[],["robj",4]]],[11,"vector_to_pair_list","","Convert a vector list (VECSXP) to a pair list (LISTSXP)",7,[[],["robj",4]]],[11,"as_character_factor","","Convert a factor to a string vector.",7,[[],["robj",4]]],[11,"alloc_matrix","","Allocate a matrix object.",7,[[["sexptype",6]],["robj",4]]],[11,"duplicate","","Compatible way to duplicate an object. Use obj.clone()…",7,[[]]],[11,"find_function","","Find a function in an environment ignoring other variables.",7,[[],[["anyerror",6],["result",4],["robj",4]]]],[11,"ncols","","Number of columns of a matrix",7,[[]]],[11,"nrows","","Number of rows of a matrix",7,[[]]],[11,"xlengthgets","","Read-only access to attribute list. Copy a vector and…",7,[[],[["anyerror",6],["result",4],["robj",4]]]],[11,"alloc_vector","","Allocated an owned object of a certain type.",7,[[],["robj",4]]],[11,"conformable","","Return true if two arrays have identical dims.",7,[[["robj",4]]]],[11,"is_array","","Borrow an element from a list. Return true if this is an…",7,[[]]],[11,"is_factor","","Return true if this is factor.",7,[[]]],[11,"is_frame","","Return true if this is a data frame.",7,[[]]],[11,"is_function","","Return true if this is a function.",7,[[]]],[11,"is_integer","","Return true if this is an integer vector.",7,[[]]],[11,"is_language","","Return true if this is a language object.",7,[[]]],[11,"is_list","","Return true if this is a vector list.",7,[[]]],[11,"is_matrix","","Return true if this is a matrix.",7,[[]]],[11,"is_new_list","","Return true if this is a vector list or null.",7,[[]]],[11,"is_number","","Return true if this is a numeric vector but not a factor.",7,[[]]],[11,"is_pair_list","","Return true if this is a pairlist.",7,[[]]],[11,"is_primitive","","Return true if this is a primitive function.",7,[[]]],[11,"is_ts","","Return true if this is a time series vector (see tsp).",7,[[]]],[11,"is_user_binop","","Return true if this is a user defined binop.",7,[[]]],[11,"is_valid_string","","Return true if this is a valid string.",7,[[]]],[11,"is_valid_string_f","","Return true if this is a valid string.",7,[[]]],[11,"is_vector","","Return true if this is a vector.",7,[[]]],[11,"is_vector_atomic","","Return true if this is an atomic vector.",7,[[]]],[11,"is_vector_list","","Return true if this is a vector list.",7,[[]]],[11,"is_vectorizable","","Return true if this is can be made into a vector.",7,[[]]],[11,"len","","Get the extended length of the object.",7,[[]]],[11,"is_na","","Is this object is an NA scalar? Works for character,…",7,[[]]],[11,"as_integer_slice","","Get a read-only reference to the content of an integer…",7,[[],["option",4]]],[11,"integer_iter","","Get an iterator over integer elements of this slice.",7,[[],[["option",4],["integeriter",6]]]],[11,"as_integer_vector","","Get a Vec copied from the object.",7,[[],[["option",4],["vec",3]]]],[11,"as_logical_slice","","Get a read-only reference to the content of a logical…",7,[[],["option",4]]],[11,"as_logical_vector","","Get a Vec copied from the object using the tri-state…",7,[[],[["option",4],["vec",3]]]],[11,"logical_iter","","Get an iterator over logical elements of this slice.",7,[[],[["option",4],["logicaliter",6]]]],[11,"as_real_slice","","Get a read-only reference to the content of a double…",7,[[],["option",4]]],[11,"real_iter","","Get an iterator over real elements of this slice.",7,[[],[["realiter",6],["option",4]]]],[11,"as_real_vector","","Get a Vec copied from the object.",7,[[],[["vec",3],["option",4]]]],[11,"as_raw_slice","","Get a read-only reference to the content of an integer or…",7,[[],["option",4]]],[11,"as_integer_slice_mut","","Get a read-write reference to the content of an integer or…",7,[[],["option",4]]],[11,"as_real_slice_mut","","Get a read-write reference to the content of a double…",7,[[],["option",4]]],[11,"as_raw_slice_mut","","Get a read-write reference to the content of a raw vector.",7,[[],["option",4]]],[11,"as_string_vector","","Get a vector of owned strings. Owned strings have long…",7,[[],[["vec",3],["option",4]]]],[11,"as_str_vector","","Get a vector of string references. String references…",7,[[],[["vec",3],["option",4]]]],[11,"as_str","","Get a read-only reference to a char, symbol or string type.",7,[[],["option",4]]],[11,"as_integer","","Get a scalar integer.",7,[[],["option",4]]],[11,"as_real","","Get a scalar real.",7,[[],["option",4]]],[11,"as_bool","","Get a scalar rust boolean.",7,[[],["option",4]]],[11,"as_logical","","Get a scalar boolean as a tri-boolean [Bool] value.",7,[[],[["bool",3],["option",4]]]],[11,"eval","","Evaluate the expression in R and return an error or an R…",7,[[],[["anyerror",6],["result",4],["robj",4]]]],[11,"eval_blind","","Evaluate the expression and return NULL or an R object.",7,[[],["robj",4]]],[11,"parse","","Parse a string into an R executable object",7,[[],[["anyerror",6],["result",4],["robj",4]]]],[11,"eval_string","","Parse a string into an R executable object and run it.",7,[[],[["anyerror",6],["result",4],["robj",4]]]],[11,"is_owned","","Return true if the object is owned by this wrapper. If so,…",7,[[]]],[11,"get_attrib","","Get a specific attribute as a borrowed robj if it exists.",7,[[],[["option",4],["robj",4]]]],[11,"set_attrib","","Set a specific attribute and return the value.",7,[[],["robj",4]]],[11,"names","","Get the names attribute as a string iterator if one exists.",7,[[],[["option",4],["striter",3]]]],[11,"dim","","Get the dim attribute as an integer iterator if one exists.",7,[[],[["option",4],["integeriter",6]]]],[11,"dimnames","","Get the dimnames attribute as a list iterator if one exists.",7,[[],[["option",4],["veciter",3]]]],[11,"named_list_iter","","Return an iterator over names and values of a list if they…",7,[[],[["option",4],["namedlistiter",6]]]],[11,"class","","Get the class attribute as a string iterator if one exists.",7,[[],[["option",4],["striter",3]]]],[11,"inherits","","Return true if this class inherits this class.",7,[[]]],[11,"levels","","Get the levels attribute as a string iterator if one exists.",7,[[],[["option",4],["striter",3]]]],[6,"NamedListIter","","Iterator over name-value pairs in lists.",null,null],[6,"IntegerIter","","Iterator over primitives in integer objects.",null,null],[6,"RealIter","","Iterator over primitives in real objects.",null,null],[6,"LogicalIter","","Iterator over primitives in logical objects.",null,null],[6,"AnyError","","Generic dynamic error type.",null,null],[17,"TRUE","","TRUE value eg. `r!(TRUE)`",null,null],[17,"FALSE","","FALSE value eg. `r!(FALSE)`",null,null],[17,"NULL","","NULL value eg. `r!(NULL)`",null,null],[17,"NA_INTEGER","","NA value for integers eg. `r!(NA_INTEGER)`",null,null],[17,"NA_REAL","","NA value for real values eg. `r!(NA_REAL)`",null,null],[17,"NA_STRING","","NA value for strings. `r!(NA_STRING)`",null,null],[17,"NA_LOGICAL","","NA value for logical. `r!(NA_LOGICAL)`",null,null],[8,"FromRobj","","Trait used for incomming parameter conversion.",null,null],[11,"from_robj","","",8,[[["robj",4]],["result",4]]],[8,"ToVectorValue","","`ToVectorValue` is a trait that allows many different…",null,null],[11,"sexptype","","",9,[[],["sexptype",6]]],[11,"to_real","","",9,[[]]],[11,"to_integer","","",9,[[]]],[11,"to_logical","","",9,[[]]],[11,"to_raw","","",9,[[]]],[11,"to_sexp","","",9,[[],["sexp",6]]],[8,"RobjItertools","","Extensions to iterators for R objects including…",null,null],[11,"collect_robj","","Convert a wide range of iterators to Robj.",10,[[],["robj",4]]],[8,"AsTypedSlice","","Generic access to typed slices in an Robj.",null,null],[11,"as_typed_slice","","",11,[[],["option",4]]],[11,"as_typed_slice_mut","","",11,[[],["option",4]]],[8,"IsNA","","Return true if this primitive is NA.",null,null],[10,"is_na","","",12,[[]]],[14,"call","","The call! macro calls an R function with Rust parameters.…",null,null],[14,"lang","","A macro for constructing R langage objects.",null,null],[14,"r","","Convert a rust expression to an R object.",null,null],[14,"R","","Call inline R source code from Rust.",null,null],[14,"c","","Concatenation operator.",null,null],[14,"rep","","Create a vector with repeating elements.",null,null],[14,"read_table","","Read a CSV file.",null,null],[14,"list","","Create a list.",null,null],[14,"data_frame","","Create a dataframe.",null,null],[14,"factor","","Create a factor.",null,null],[14,"rprint","","Print via the R output stream.",null,null],[14,"rprintln","","Print with a newline via the R output stream.",null,null],[14,"reprint","","Print via the R error stream.",null,null],[14,"reprintln","","Print with a newline via the R output stream.",null,null],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from_robj","","",6,[[["robj",4]],["result",4]]],[11,"from_robj","","",13,[[["robj",4]],["result",4]]],[11,"from_robj","","",14,[[["robj",4]],["result",4]]],[11,"from_robj","","",15,[[["robj",4]],["result",4]]],[11,"from_robj","","",16,[[["robj",4]],["result",4]]],[11,"from_robj","","",7,[[["robj",4]],["result",4]]],[11,"sexptype","","",4,[[],["sexptype",6]]],[11,"to_logical","","",4,[[]]],[11,"as_typed_slice","","",7,[[],["option",4]]],[11,"as_typed_slice_mut","","",7,[[],["option",4]]],[11,"as_typed_slice","","",7,[[],["option",4]]],[11,"as_typed_slice_mut","","",7,[[],["option",4]]],[11,"as_typed_slice","","",7,[[],["option",4]]],[11,"as_typed_slice_mut","","",7,[[],["option",4]]],[11,"as_typed_slice","","",7,[[],["option",4]]],[11,"as_typed_slice_mut","","",7,[[],["option",4]]],[11,"is_na","","",4,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",7,[[["sexp",6]]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[["character",3]]]],[11,"from","","",7,[[["robj",4]]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[["vec",3]]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[["range",3]]]],[11,"from","","",7,[[["rangeinclusive",3]]]],[11,"from","","Make a list object from an array of Robjs.",7,[[["list",3]]]],[11,"from","","Convert a string to a symbol.",7,[[["symbol",3]]]],[11,"from","","Convert a wrapped string ref to an Robj language object.",7,[[["lang",3]]]],[11,"size_hint","","",13,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"nth","","",13,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"nth","","",6,[[],["option",4]]],[11,"clone","","",4,[[]]],[11,"clone","","",13,[[],["veciter",3]]],[11,"clone","","",5,[[],["listiter",3]]],[11,"clone","","",6,[[],["striter",3]]],[11,"clone","","",7,[[]]],[11,"default","","",7,[[]]],[11,"eq","","",4,[[["bool",3]]]],[11,"ne","","",4,[[["bool",3]]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[["robj",4]]]],[11,"eq","","",0,[[["symbol",3]]]],[11,"ne","","",0,[[["symbol",3]]]],[11,"eq","","",1,[[["character",3]]]],[11,"ne","","",1,[[["character",3]]]],[11,"eq","","",2,[[["lang",3]]]],[11,"ne","","",2,[[["lang",3]]]],[11,"eq","","",3,[[["list",3]]]],[11,"ne","","",3,[[["list",3]]]],[11,"eq","","",7,[[["list",3]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"from_robj","","",8,[[["robj",4]],["result",4]]],[11,"sexptype","","",9,[[],["sexptype",6]]],[11,"to_real","","",9,[[]]],[11,"to_integer","","",9,[[]]],[11,"to_logical","","",9,[[]]],[11,"to_raw","","",9,[[]]],[11,"to_sexp","","",9,[[],["sexp",6]]],[11,"collect_robj","","Convert a wide range of iterators to Robj.",10,[[],["robj",4]]],[11,"as_typed_slice","","",11,[[],["option",4]]],[11,"as_typed_slice_mut","","",11,[[],["option",4]]]],"p":[[3,"Symbol"],[3,"Character"],[3,"Lang"],[3,"List"],[3,"Bool"],[3,"ListIter"],[3,"StrIter"],[4,"Robj"],[8,"FromRobj"],[8,"ToVectorValue"],[8,"RobjItertools"],[8,"AsTypedSlice"],[8,"IsNA"],[3,"VecIter"],[6,"IntegerIter"],[6,"RealIter"],[6,"LogicalIter"]]},\
"extendr_engine":{"doc":"A sigleton instance of the R interpreter.","i":[[5,"start_r","extendr_engine","",null,[[]]],[5,"end_r","","Close down the R interpreter. Note you won\'t be able to…",null,[[]]]],"p":[]},\
"extendr_macros":{"doc":"Macros for generating wrappers for rust functions.","i":[[23,"extendr","extendr_macros","Generate bindings for a single function.",null,null],[14,"extendr_module","","Define a module and export symbols to R Example:",null,null]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);